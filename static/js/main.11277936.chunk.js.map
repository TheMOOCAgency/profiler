{"version":3,"sources":["components/tab-panel/TabPanel.jsx","components/forms/submit-button/SubmitButton.jsx","components/results/bar-chart/BarChart.jsx","components/results/stacked-bar-chart/StackedBarChart.jsx","components/forms/likert-form/LikertForm.jsx","components/forms/free-field/FreeField.jsx","components/exercise-page/ExercisePage.jsx","container/profiler-app/ProfilerApp.jsx","App.jsx","reducers/index.js","index.js"],"names":["TabPanel","props","children","value","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","useStyles","makeStyles","theme","root","margin","backgroundColor","width","color","border","SubmitButton","onClick","disabled","classes","Button","variant","className","type","BarChart","data","test","requiredForms","topic","useState","chartHeight","setChartHeight","useEffect","length","Grid","container","mt","justify","height","layout","style","fontSize","colors","map","form","dataKey","name","fill","key","entry","renderBars","reversed","StackedBarChart","stackId","CustomRadio","withStyles","checked","Radio","questionLine","borderBottom","padding","requiredFields","radioButtons","answers","input","salut","meta","error","touched","rest","FormControl","direction","alignItems","RadioGroup","row","answer","FormControlLabel","opacity","display","justifyContent","toString","control","fontStyle","reduxForm","enableReinitialize","validate","formValues","errors","questions","question","indexOf","push","forEach","field","handleSubmit","pristine","submitting","button","result","drivers","isCompleted","setCompletion","size","setSize","setData","results","useSelector","state","values","blank","renderHeader","borderRadius","item","md","sm","textAlign","fontWeight","toUpperCase","formatResults","rawData","formatedData","mark","console","log","subTopic","driver","Number","coef","Object","testTotal","onSubmit","a","marginBottom","marginTop","FormGroup","paddingLeft","wording","text","Field","CssTextField","borderBottomColor","borderColor","TextField","renderCustomInput","multiline","rows","autoComplete","ExercisePage","skills","skill","parentIndex","tests","FormName","tab","paper","overflowX","ProfilerApp","window","setValue","handleChange","event","newValue","AppBar","position","Tabs","onChange","scrollButtons","aria-label","TabIndicatorProps","Tab","label","a11yProps","lg","xs","paddingTop","App","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.11277936.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\n\nconst TabPanel = props => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n};\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nexport default TabPanel;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: \"10px 0 50px 0\",\n    backgroundColor: \"#b71b53\",\n    width: \"300px\",\n    color: \"white\",\n    border: \"none\",\n    \"&:hover\": {\n      backgroundColor: \"#353535\"\n    },\n    \"&:disabled\": { backgroundColor: \"#353535\", color: \"white\" }\n  }\n}));\n\nconst SubmitButton = ({ children, onClick, disabled }) => {\n  const classes = useStyles();\n  return (\n    <Button\n      variant=\"outlined\"\n      onClick={onClick}\n      className={classes.root}\n      type=\"submit\"\n      disabled={disabled}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default SubmitButton;\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n  BarChart as Chart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Legend,\n  Cell\n} from \"recharts\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst BarChart = ({ data, test }) => {\n  const { requiredForms, topic } = test;\n  const [chartHeight, setChartHeight] = useState(200);\n\n  useEffect(() => {\n    if (requiredForms) {\n      setChartHeight(200 + requiredForms.length * 100);\n    } else {\n      setChartHeight(200);\n    }\n  }, [chartHeight, requiredForms]);\n\n  const renderBars = () => {\n    const colors = [\n      \"#b71b60\",\n      \"#353535\",\n      \"#949b9f\",\n      \"#b71b60\",\n      \"#353535\",\n      \"#949b9f\",\n      \"#b71b60\",\n      \"#353535\",\n      \"#949b9f\",\n      \"#b71b60\",\n      \"#353535\",\n      \"#949b9f\"\n    ];\n    if (requiredForms) {\n      // MULTIPLE FORMS CASE\n      return requiredForms.map((form, index) => (\n        <Bar\n          dataKey={form.id}\n          name={form.name}\n          fill={colors[index]}\n          key={form.id}\n        />\n      ));\n    } else {\n      // SINGLE FORM CASE\n      return (\n        <Bar dataKey=\"testTotal\" name={topic}>\n          {data.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={colors[index]} />\n          ))}\n        </Bar>\n      );\n    }\n  };\n\n  return (\n    <Grid container mt={5} justify=\"center\">\n      <ResponsiveContainer width=\"100%\" height={chartHeight}>\n        <Chart data={data} layout=\"vertical\" style={{ fontSize: \"12px\" }}>\n          <XAxis type=\"number\" />\n          {renderBars()}\n          <YAxis dataKey=\"name\" reversed type=\"category\" />\n          <Legend />\n        </Chart>\n      </ResponsiveContainer>\n    </Grid>\n  );\n};\n\nexport default BarChart;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  BarChart as Chart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer\n} from \"recharts\";\n\nconst StackedBarChart = ({ data }) => {\n  return (\n    <Grid container mt={5} justify=\"center\">\n      <ResponsiveContainer width=\"100%\" height={200}>\n        <Chart data={data} layout=\"vertical\" style={{ fontSize: \"12px\" }}>\n          <XAxis type=\"number\" />\n          <YAxis dataKey=\"name\" reversed type=\"category\" />\n          <Bar dataKey=\"mark\" stackId=\"a\" name=\"Mon score\" fill=\"#b71b60\" />\n          <Bar\n            dataKey=\"rest\"\n            stackId=\"a\"\n            name=\"Autopositionnement\"\n            fill=\"#949b9f\"\n          />\n        </Chart>\n      </ResponsiveContainer>\n    </Grid>\n  );\n};\n\nexport default StackedBarChart;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { useSelector } from \"react-redux\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport SubmitButton from \"../submit-button/SubmitButton\";\nimport BarChart from \"../../results/bar-chart/BarChart\";\nimport StackedBarChart from \"../../results/stacked-bar-chart/StackedBarChart\";\n\nconst CustomRadio = withStyles({\n  root: {\n    color: \"#b71b53\",\n    \"&$checked\": {\n      color: \"#b71b53\"\n    },\n    margin: \"0 auto\"\n  },\n  checked: {}\n})(props => <Radio color=\"default\" {...props} />);\n\nconst useStyles = makeStyles(theme => ({\n  questionLine: {\n    borderBottom: \"1px solid rgba(75,75,75,0.2)\",\n    padding: \"20px 0\"\n  }\n}));\n\nlet requiredFields = [];\n\nconst validate = (formValues, props) => {\n  const errors = {};\n  props.test.questions.map(question => {\n    if (requiredFields.indexOf(question.id) === -1) {\n      requiredFields.push(question.id);\n    }\n    return requiredFields;\n  });\n\n  requiredFields.forEach(field => {\n    if (!formValues[field]) {\n      errors[field] = \"Champ requis\";\n    }\n  });\n\n  return errors;\n};\n\n/* BUTTON LINE */\nconst radioButtons = ({\n  answers,\n  salut,\n  input,\n  meta: { error, touched },\n  ...rest\n}) => (\n  <FormControl>\n    <Grid container direction=\"row\" alignItems=\"center\">\n      <RadioGroup {...input} {...rest} row>\n        {answers.map(answer => {\n          return (\n            <FormControlLabel\n              style={{\n                opacity: `${0.5 + answer.value / 15}`,\n                width: \"100px\",\n                display: \"flex\",\n                margin: \"0 auto\",\n                justifyContent: \"space-around\"\n              }}\n              key={answer.value}\n              value={answer.value.toString()}\n              control={<CustomRadio />}\n            />\n          );\n        })}\n      </RadioGroup>\n      <h4\n        style={{\n          color: \"#353535\",\n          fontSize: \"12px\",\n          margin: 0,\n          fontStyle: \"italic\",\n          opacity: \"0.6\"\n        }}\n      >\n        {touched && error}\n      </h4>\n    </Grid>\n  </FormControl>\n);\n\n/* MAIN COMPONENT */\nconst LikertForm = ({ handleSubmit, pristine, submitting, test }) => {\n  const {\n    questions,\n    answers,\n    button,\n    type,\n    result,\n    name,\n    drivers,\n    requiredForms,\n    topic\n  } = test;\n\n  const [isCompleted, setCompletion] = useState(false);\n  const [size, setSize] = useState({});\n  const [data, setData] = useState([]);\n\n  // REACT-REDUX WITH HOOKS, REPLACE MAPSTATETOPROPS\n  const { results } = useSelector(state => ({\n    results: state.form[name].values\n  }));\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    // ADAPT SIZE WHETHER IT'S A LIKERT SCALE OR A TRUE/FALSE\n    const resize = () => {\n      if (type === \"likert\") {\n        setSize({ questions: 4, blank: 1, answers: 7 });\n      } else if (type === \"true-or-false\") {\n        setSize({ questions: 7, blank: 1, answers: 4 });\n      }\n    };\n    resize();\n  }, [type]);\n\n  const renderHeader = () => {\n    return (\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"flex-end\"\n        style={{\n          borderRadius: \"5px\",\n          padding: \"10px\",\n          color: \"#353535\",\n          border: \"2px solid #b71b53\"\n        }}\n      >\n        <Grid item md={size.questions} sm={false} />\n        <Grid item md={size.blank} sm={false} />\n        <Grid\n          item\n          md={size.answers}\n          sm={12}\n          style={{ display: \"flex\", justifyContent: \"flex-end\" }}\n        >\n          <Grid container direction=\"row\" alignItems=\"center\">\n            {answers &&\n              answers.map(answer => {\n                return (\n                  <div\n                    key={answer.value}\n                    style={{\n                      width: \"100px\",\n                      fontSize: \"12px\",\n                      textAlign: \"center\",\n                      fontWeight: \"600\"\n                    }}\n                  >\n                    {answer.name.toUpperCase()}\n                  </div>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  const renderQuestions = () => {\n    return (\n      questions &&\n      questions.map(question => {\n        if (!question.subTopic) {\n          return (\n            <Grid\n              key={question.id}\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justify=\"space-between\"\n              className={classes.questionLine}\n            >\n              <Grid\n                item\n                md={size.questions}\n                sm={12}\n                style={{ fontSize: \"14px\" }}\n              >\n                {question.text}\n              </Grid>\n              <Grid item md={size.blank} sm={false} />\n              <Grid item md={size.answers} sm={12}>\n                <Field\n                  name={question.id}\n                  answers={answers}\n                  component={radioButtons}\n                />\n              </Grid>\n            </Grid>\n          );\n        } else {\n          return (\n            <Grid\n              container\n              direction=\"column\"\n              key={question.subTopic}\n              style={{\n                color: \"#353535\",\n                margin: \"30px 0 20px 0\"\n              }}\n            >\n              <Grid item sm={12}>\n                <h4\n                  style={{\n                    margin: \"0 0 10px 0\",\n                    fontStyle: \"italic\",\n                    padding: \"10px\",\n                    backgroundColor: \"#b71b60\",\n                    color: \"white\",\n                    borderRadius: \"5px\"\n                  }}\n                >\n                  {question.subTopic.toUpperCase()}\n                </h4>\n              </Grid>\n              <Grid\n                item\n                md={7}\n                sm={12}\n                style={{\n                  textAlign: \"justify\",\n                  fontStyle: \"italic\",\n                  fontSize: \"14px\",\n                  paddingLeft: \"10px\"\n                }}\n              >\n                {question.wording}\n              </Grid>\n              <Grid item sm={12}>\n                {renderHeader()}\n              </Grid>\n            </Grid>\n          );\n        }\n      })\n    );\n  };\n\n  const renderSubmitButton = () => {\n    return (\n      <Fragment>\n        {result ? (\n          <SubmitButton disabled={pristine || submitting}>\n            <Fragment>{button}</Fragment>\n          </SubmitButton>\n        ) : (\n          <Grid\n            item\n            md={12}\n            style={{\n              height: \"10px\",\n              backgroundColor: \"#b71b53\",\n              borderRadius: \"5px\",\n              margin: \"50px 0\",\n              opacity: \"0.5\"\n            }}\n          />\n        )}\n      </Fragment>\n    );\n  };\n\n  const renderResult = () => {\n    if (result === \"histogram\") {\n      return (\n        <Fragment>\n          {isCompleted && result && <BarChart test={test} data={data} />}\n        </Fragment>\n      );\n    } else if (result === \"stackedBarChart\") {\n      return (\n        <Fragment>\n          {isCompleted && result && <StackedBarChart test={test} data={data} />}\n        </Fragment>\n      );\n    }\n  };\n\n  // FORMAT THE DATA SO IT MATCHES WITH BARCHART FORMAT\n  const formatResults = () => {\n    let rawData = {};\n    let formatedData = [];\n    // TRUE OR FALSE CASE\n    if (type === \"true-or-false\") {\n      rawData = {\n        name: test.topic,\n        mark: 0,\n        rest: 100\n      };\n      questions.map(question => {\n        console.log(question[results[question.id]]);\n        rawData.mark += question[results[question.id]] * 10;\n        rawData.rest -= question[results[question.id]] * 10;\n        return rawData;\n      });\n      formatedData.push(rawData);\n      setData(formatedData);\n      // LIKERT - SINGLE FORM CASE\n    } else if (type === \"likert\" && !requiredForms) {\n      questions.map(question => {\n        if (!rawData[question.driver]) {\n          return (rawData[question.driver] = {\n            name: drivers[question.driver],\n            testTotal: Number(results[question.id])\n          });\n        } else {\n          return (rawData[question.driver].testTotal += Number(\n            results[question.id]\n          ));\n        }\n      });\n      formatedData = Object.values(rawData);\n      console.log(formatedData);\n      setData(formatedData);\n      // LIKERT - MULTIPLE FORM CASE\n    } else if (type === \"likert\" && requiredForms) {\n      requiredForms.map(form => {\n        return questions.map(question => {\n          if (!question.subTopic) {\n            if (!rawData[question.driver]) {\n              return (rawData[question.driver] = {\n                name: drivers[question.driver],\n                [question.form.id]:\n                  Number(results[question.id]) * Number(question.form.coef)\n              });\n            } else {\n              if (!rawData[question.driver][question.form.id]) {\n                return (rawData[question.driver][question.form.id] =\n                  Number(results[question.id]) * Number(question.form.coef));\n              } else {\n                return (rawData[question.driver][question.form.id] +=\n                  Number(results[question.id]) * Number(question.form.coef));\n              }\n            }\n          }\n          return rawData;\n        });\n      });\n\n      formatedData = Object.values(rawData);\n      console.log(formatedData);\n      setData(formatedData);\n    }\n  };\n\n  const onSubmit = async formValues => {\n    // no need e.preventdefault as handleSubmit handles it\n    await formatResults();\n    setCompletion(true);\n    return formValues;\n  };\n\n  return (\n    <Grid style={{ marginBottom: \"30px\" }}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Fragment>\n          {topic && (\n            <h4\n              style={{\n                margin: \"0\",\n                fontStyle: \"italic\",\n                padding: \"10px\",\n                backgroundColor: \"#b71b60\",\n                color: \"white\",\n                borderRadius: \"5px\"\n              }}\n            >\n              {topic.toUpperCase()}\n            </h4>\n          )}\n        </Fragment>\n        <Fragment>\n          {!requiredForms && (\n            <div style={{ marginTop: \"10px\" }}>{renderHeader()}</div>\n          )}\n        </Fragment>\n        <FormGroup>\n          <Fragment>{renderQuestions()}</Fragment>\n          <Fragment>{renderSubmitButton()}</Fragment>\n        </FormGroup>\n      </form>\n      <Fragment>{renderResult()}</Fragment>\n    </Grid>\n  );\n};\n\n// FORM NAME IS DEFINED IN FORMNAME PARENT ON EXERCISE PAGE\nexport default reduxForm({ form: \"\", enableReinitialize: true, validate })(\n  LikertForm\n);\n","import React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SubmitButton from \"../submit-button/SubmitButton\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\n\nconst CssTextField = withStyles({\n  root: {\n    marginBottom: \"10px\",\n    width: \"100%\",\n    \"& label.Mui-focused\": {\n      color: \"#b71b60\"\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"#b71b60\"\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"#b71b60\"\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"#353535\"\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"#b71b60\"\n      }\n    }\n  }\n})(TextField);\n\nlet requiredFields = [];\n\nconst validate = (formValues, props) => {\n  const errors = {};\n  props.test.questions.map(question => {\n    if (requiredFields.indexOf(question.id) === -1) {\n      requiredFields.push(question.id);\n    }\n    return requiredFields;\n  });\n\n  requiredFields.forEach(field => {\n    if (!formValues[field]) {\n      errors[field] = \"\";\n    }\n  });\n\n  return errors;\n};\n\nconst FreeField = ({ test, handleSubmit, pristine, submitting }) => {\n  const { questions, button, topic } = test;\n\n  const renderCustomInput = ({ input }) => {\n    return (\n      <Fragment>\n        <CssTextField\n          id=\"outlined-multiline-static\"\n          multiline\n          rows=\"6\"\n          variant=\"outlined\"\n          autoComplete=\"off\"\n          {...input}\n        />\n      </Fragment>\n    );\n  };\n\n  const renderInputs = () => {\n    return questions.map((question, index) => {\n      return (\n        <Grid container key={question.id}>\n          <div style={{ margin: \"30px 0 10px 0\" }}>\n            {questions.length > 1\n              ? index + 1 + \". \" + question.text\n              : question.text}\n          </div>\n          <Field name={question.id} component={renderCustomInput} />\n        </Grid>\n      );\n    });\n  };\n\n  const onSubmit = formValues => {\n    // SEND TO API\n    let values = { name: test.name, values: formValues };\n    console.log(values);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <FormGroup>\n        {topic && (\n          <h4\n            style={{\n              margin: \"0\",\n              fontStyle: \"italic\",\n              padding: \"10px\",\n              backgroundColor: \"#b71b60\",\n              color: \"white\",\n              borderRadius: \"5px\"\n            }}\n          >\n            {topic.toUpperCase()}\n          </h4>\n        )}\n        <Fragment>{renderInputs()}</Fragment>\n        <SubmitButton disabled={pristine || submitting}>\n          <Fragment>{button}</Fragment>\n        </SubmitButton>\n      </FormGroup>\n    </form>\n  );\n};\n\nexport default reduxForm({\n  form: \"\",\n  enableReinitialize: true,\n  validate\n})(FreeField);\n","import React, { Fragment } from \"react\";\n// import jsPDF from \"jspdf\";\n// import html2canvas from \"html2canvas\";\nimport LikertForm from \"../../components/forms/likert-form/LikertForm\";\nimport FreeField from \"../../components/forms/free-field/FreeField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { FormName } from \"redux-form\";\n\nconst ExercisePage = ({ skills, skill, parentIndex }) => {\n  const { topic, wording } = skills[parentIndex];\n\n  // let initialValues = {\n  //   question0: \"3\"\n  // };\n\n  const renderWording = () => {\n    return (\n      <Fragment>\n        {(topic || wording) && (\n          <Fragment>\n            {topic && (\n              <h3\n                style={{\n                  backgroundColor: \"#353535\",\n                  color: \"white\",\n                  padding: \"10px\",\n                  borderRadius: \"5px\"\n                }}\n              >\n                {topic.toUpperCase()}\n              </h3>\n            )}\n            {wording && (\n              <Grid\n                item\n                md={7}\n                sm={12}\n                style={{\n                  textAlign: \"justify\",\n                  fontStyle: \"italic\",\n                  fontSize: \"14px\",\n                  paddingLeft: \"20px\",\n                  marginBottom: \"10px\"\n                }}\n              >\n                {wording}\n              </Grid>\n            )}\n          </Fragment>\n        )}\n      </Fragment>\n    );\n  };\n\n  const renderTestType = () => {\n    return skill.tests.map((test, index) => {\n      if (test.type === \"likert\") {\n        return (\n          <FormName key={index}>\n            {() => (\n              <LikertForm\n                test={test}\n                form={test.name}\n                // initialValues={initialValues}\n              />\n            )}\n          </FormName>\n        );\n      } else if (test.type === \"true-or-false\") {\n        return (\n          <FormName key={index}>\n            {() => (\n              <LikertForm\n                test={test}\n                form={test.name}\n                // initialValues={initialValues}\n              />\n            )}\n          </FormName>\n        );\n      } else if (test.type === \"free-field\") {\n        return (\n          <FormName key={index}>\n            {() => (\n              <FreeField\n                test={test}\n                form={test.name}\n                // initialValues={initialValues}\n              />\n            )}\n          </FormName>\n        );\n      }\n      return null;\n    });\n  };\n\n  // const printPdf = () => {\n  //   const input = document.getElementById(\"to-print\");\n\n  //   html2canvas(input).then(canvas => {\n  //     const imgData = canvas.toDataURL(\"image/png\");\n  //     const pdf = new jsPDF(\"p\", \"pt\", \"a4\", true);\n\n  //     pdf.addImage(imgData, \"PNG\", 0, 0, 270, 270);\n  //     pdf.save(`${skill.name}.pdf`);\n  //   });\n  // };\n\n  return (\n    <Fragment>\n      <div id=\"to-print\">\n        <Grid>\n          <Fragment>{renderWording()}</Fragment>\n          <Fragment>{renderTestType()}</Fragment>\n        </Grid>\n      </div>\n      {/* <button onClick={() => printPdf()}>Print</button> */}\n    </Fragment>\n  );\n};\n\nexport default ExercisePage;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TabPanel from \"../../components/tab-panel/TabPanel\";\nimport Paper from \"@material-ui/core/Grid\";\nimport ExercisePage from \"../../components/exercise-page/ExercisePage\";\n\nconst a11yProps = index => {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    \"aria-controls\": `scrollable-auto-tabpanel-${index}`\n  };\n};\n\nconst language = \"fr\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    // flexGrow: 1,\n    width: \"100%\",\n    backgroundColor: \"white\"\n  },\n  tab: {\n    \"&:last-child\": {\n      color: \"#b71b53\"\n    }\n  },\n  paper: { margin: \"0\", width: \"100%\", overflowX: \"auto\", padding: \"20px 0\" }\n}));\n\n/* MAIN COMPONENT */\nconst ProfilerApp = () => {\n  const { skills } = window.props[language];\n  const classes = useStyles();\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const renderTabs = () => {\n    return (\n      <AppBar position=\"fixed\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n          TabIndicatorProps={{\n            style: {\n              backgroundColor: \"#b71b53\"\n            }\n          }}\n        >\n          {skills.map((skill, index) => {\n            return (\n              <Tab\n                key={index}\n                label={skill.name}\n                {...a11yProps(index)}\n                className={classes.tab}\n              />\n            );\n          })}\n        </Tabs>\n      </AppBar>\n    );\n  };\n\n  const renderPanel = () => {\n    return skills.map((skill, index) => {\n      return (\n        <TabPanel value={value} index={index} key={index}>\n          <Grid style={{ paddingTop: \"40px\" }}>\n            <Paper className={classes.paper}>\n              <ExercisePage skill={skill} skills={skills} parentIndex={index} />\n            </Paper>\n          </Grid>\n        </TabPanel>\n      );\n    });\n  };\n\n  return (\n    <Grid container className={classes.root} justify=\"center\">\n      <Grid item>{renderTabs()}</Grid>\n      <Grid item lg={8} md={12} sm={12} xs={12}>\n        {renderPanel()}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ProfilerApp;\n","import React from \"react\";\nimport ProfilerApp from \"./container/profiler-app/ProfilerApp\";\n\nconst App = () => {\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        width: \"100vw\"\n      }}\n    >\n      <ProfilerApp />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nexport default combineReducers({\n  form: formReducer\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport reducers from \"./reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}