{"version":3,"sources":["components/tab-panel/TabPanel.jsx","components/forms/submit-button/SubmitButton.jsx","components/results/bar-chart/BarChart.jsx","components/results/stacked-bar-chart/StackedBarChart.jsx","components/results/xy-chart/XYChart.jsx","components/forms/likert-form/LikertForm.jsx","components/forms/free-field/FreeField.jsx","components/exercise-page/ExercisePage.jsx","container/profiler-app/ProfilerApp.jsx","App.jsx","reducers/index.js","index.js"],"names":["TabPanel","props","children","value","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","useStyles","makeStyles","theme","root","margin","backgroundColor","width","color","border","SubmitButton","onClick","disabled","classes","Button","variant","className","type","BarChart","data","test","dataForms","topic","useState","chartHeight","setChartHeight","useEffect","length","Grid","container","mt","justify","height","layout","style","fontSize","colors","map","form","dataKey","name","fill","key","entry","renderBars","reversed","StackedBarChart","stackId","XYChart","CustomRadio","withStyles","checked","Radio","questionLine","borderBottom","padding","spacing","radioBlock","display","justifyContent","answerBlock","textAlign","fontWeight","answerIndex","palette","primary","buttonsLine","marginTop","headerLine","flexDirection","alignItems","quizHeader","borderRadius","requiredFields","radioButtons","answers","input","salut","meta","error","touched","rest","FormControl","direction","RadioGroup","row","answer","marginRight","FormControlLabel","toString","control","fontStyle","opacity","reduxForm","enableReinitialize","validate","formValues","errors","questions","requiredForms","findForm","question","subTopic","find","indexOf","push","a","forEach","field","handleSubmit","pristine","submitting","button","result","drivers","isCompleted","setCompletion","size","setSize","setData","results","useSelector","state","values","blank","renderHeader","item","md","sm","xs","toUpperCase","formatResults","rawData","formatedData","mark","driver1","Number","driver","coef","Object","testTotal","onSubmit","marginBottom","FormGroup","paddingLeft","wording","text","Field","renderQuestions","CssTextField","borderBottomColor","borderColor","TextField","renderCustomInput","multiline","rows","autoComplete","console","log","html","dangerouslySetInnerHTML","element","__html","ExercisePage","skills","skill","parentIndex","initialValues","setInitialValues","tests","prevState","FormName","src","alt","tab","paper","overflowX","ProfilerApp","window","setValue","handleChange","event","newValue","AppBar","position","Tabs","onChange","scrollButtons","aria-label","TabIndicatorProps","Tab","label","a11yProps","lg","paddingTop","createMuiTheme","main","secondary","chart","0","1","2","factor","breakpoints","xl","fontSizes","small","medium","large","h5","h4","h3","h2","h1","App","ThemeProvider","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"oVA4BeA,EAvBE,SAAAC,GAAU,IACjBC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,EADX,YACqBJ,EADrB,8BAGxB,OACE,kBAACK,EAAA,EAAD,eACEC,UAAU,MACVC,KAAK,WACLC,OAAQN,IAAUC,EAClBM,GAAE,mCAA8BN,GAChCO,kBAAA,8BAAwCP,IACpCC,GAEJ,kBAACO,EAAA,EAAD,CAAKC,EAAG,GAAIX,K,iHCbZY,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,OAAQ,gBACRC,gBAAiB,UACjBC,MAAO,QACP,4BAA6B,CAC3BA,MAAO,QAETC,MAAO,QACPC,OAAQ,OACR,UAAW,CACTH,gBAAiB,WAEnB,aAAc,CAAEA,gBAAiB,UAAWE,MAAO,cAmBxCE,EAfM,SAAC,GAAqC,IAAnCrB,EAAkC,EAAlCA,SAAUsB,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACnCC,EAAUZ,IAChB,OACE,kBAACa,EAAA,EAAD,CACEC,QAAQ,WACRJ,QAASA,EACTK,UAAWH,EAAQT,KACnBa,KAAK,SACLL,SAAUA,GAETvB,I,QC6CQ6B,EA/DE,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAChBC,EAAqBD,EAArBC,UAAWC,EAAUF,EAAVE,MADgB,EAEGC,mBAAS,KAFZ,mBAE5BC,EAF4B,KAEfC,EAFe,KAInCC,qBAAU,WAEND,EADEJ,EACa,IAAyB,IAAnBA,EAAUM,OAEhB,OAEhB,CAACH,EAAaH,IAuCjB,OACE,kBAACO,EAAA,EAAD,CAAMC,WAAS,EAACC,GAAI,EAAGC,QAAQ,UAC7B,kBAAC,IAAD,CAAqBxB,MAAM,OAAOyB,OAAQR,GACxC,kBAAC,IAAD,CAAOL,KAAMA,EAAMc,OAAO,WAAWC,MAAO,CAAEC,SAAU,SACtD,kBAAC,IAAD,CAAOlB,KAAK,WAzCD,WACjB,IAAMmB,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEF,OAAIf,EAEKA,EAAUgB,KAAI,SAACC,EAAM/C,GAAP,OACnB,kBAAC,IAAD,CACEgD,QAASD,EAAKzC,GACd2C,KAAMF,EAAKE,KACXC,KAAML,EAAO7C,GACbmD,IAAKJ,EAAKzC,QAMZ,kBAAC,IAAD,CAAK0C,QAAQ,YAAYC,KAAMlB,GAC5BH,EAAKkB,KAAI,SAACM,EAAOpD,GAAR,OACR,kBAAC,IAAD,CAAMmD,IAAG,eAAUnD,GAASkD,KAAML,EAAO7C,SAY1CqD,GACD,kBAAC,IAAD,CAAOL,QAAQ,OAAOM,UAAQ,EAAC5B,KAAK,aACpC,kBAAC,IAAD,UCvCK6B,EApBS,SAAC,GAAc,IAAZ3B,EAAW,EAAXA,KACzB,OACE,kBAACS,EAAA,EAAD,CAAMC,WAAS,EAACC,GAAI,EAAGC,QAAQ,UAC7B,kBAAC,IAAD,CAAqBxB,MAAM,OAAOyB,OAAQ,KACxC,kBAAC,IAAD,CAAOb,KAAMA,EAAMc,OAAO,WAAWC,MAAO,CAAEC,SAAU,SACtD,kBAAC,IAAD,CAAOlB,KAAK,WACZ,kBAAC,IAAD,CAAOsB,QAAQ,OAAOM,UAAQ,EAAC5B,KAAK,aACpC,kBAAC,IAAD,CAAKsB,QAAQ,OAAOQ,QAAQ,IAAIP,KAAK,YAAYC,KAAK,YACtD,kBAAC,IAAD,CACEF,QAAQ,OACRQ,QAAQ,IACRP,KAAK,qBACLC,KAAK,gBCLFO,EANC,WAGd,OAAO,uFCCHC,EAAcC,YAAW,CAC7B9C,KAAM,CACJI,MAAO,UACPH,OAAO,WAET8C,QAAS,CAAE3C,MAAO,YALA0C,EAMjB,SAAA9D,GAAK,OAAI,kBAACgE,EAAA,EAAD,eAAO5C,MAAM,WAAcpB,OAEjCa,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCkD,aAAc,CACZC,aAAc,+BACdC,QAASpD,EAAMqD,QAAQ,EAAG,IAE5BC,WAAY,CAEVlD,MAAO,QACP,4BAA6B,CAC3BA,MAAO,OACPF,OAAQ,GAEVqD,QAAS,OACTrD,OAAO,GAAD,OAAKF,EAAMqD,QAAQ,GAAnB,UACNG,eAAgB,gBAElBC,YAAa,CACXrD,MAAO,QACP4B,SAAU,OACV0B,UAAW,OACXC,WAAY,MACZ,4BAA6B,CAC3BvD,MAAO,OACPF,OAAQ,UAGZ0D,YAAa,CACX5B,SAAU,OACV2B,WAAY,MACZtD,MAAOL,EAAM6D,QAAQC,QACrBP,QAAS,OACTG,UAAW,SAEX,4BAA6B,CAC3BH,QAAS,UAGbQ,YAAa,CACXR,QAAS,OACT,6BAA8B,CAC5BC,eAAgB,SAChBQ,UAAWhE,EAAMqD,QAAQ,KAG7BY,WAAY,CACVV,QAAS,OACT,6BAA8B,CAC5BC,eAAgB,SAChBE,UAAW,UAEb,4BAA6B,CAC3BQ,cAAe,SACfV,eAAgB,aAChBW,WAAY,aACZT,UAAW,SAIfU,WAAY,CACVC,aAAcrE,EAAMqD,QAAQ,GAC5BD,QAASpD,EAAMqD,QAAQ,GACvBhD,MAAO,UACPC,OAAQ,yBAIRgE,EAAiB,GAqCfC,EAAe,SAAC,GAAD,IACnBC,EADmB,EACnBA,QAEAC,GAHmB,EAEnBC,MAFmB,EAGnBD,OACAnB,EAJmB,EAInBA,WACAM,EALmB,EAKnBA,YACA5D,EANmB,EAMnBA,MANmB,IAOnB2E,KAAQC,EAPW,EAOXA,MAAOC,EAPI,EAOJA,QACZC,EARgB,4FAUnB,kBAACC,EAAA,EAAD,KACE,kBAACtD,EAAA,EAAD,CAAMC,WAAS,EAACsD,UAAU,MAAMb,WAAW,UACzC,kBAACc,EAAA,EAAD,iBAAgBR,EAAWK,EAA3B,CAAiCI,KAAG,IACjCV,EAAQtC,KAAI,SAACiD,EAAQ/F,GACpB,OACE,yBACEmD,IAAK4C,EAAOhG,MACZ4C,MAAO,CACLwB,QAAS,OACTY,WAAY,WAGd,yBAAKpC,MAAO,CAAEqD,YAAa,QAAUvE,UAAW+C,GAC7CxE,EAAQ,EAAI,MAEf,kBAACiG,EAAA,EAAD,CACExE,UAAWyC,EACXnE,MAAOgG,EAAOhG,MAAMmG,WACpBC,QAAS,kBAACzC,EAAD,CAAa9C,MAAOA,WAMvC,wBACE+B,MAAO,CACL1B,MAAO,UACP2B,SAAU,OACV9B,OAAQ,EACRsF,UAAW,SACXC,QAAS,QAGVZ,GAAWD,MA2VLc,cAAU,CAAEvD,KAAM,GAAIwD,oBAAoB,EAAMC,SAxa9C,SAACC,EAAY5G,GAC5B,IAAM6G,EAAS,GADuB,EAED7G,EAAMgC,KAAnC8E,EAF8B,EAE9BA,UAAWC,EAFmB,EAEnBA,cACfC,EAAW,KA2Bf,OA1BID,EACFD,EAAU7D,KAAI,SAAAgE,GAQZ,OAPKA,EAASC,WACZF,EAAWD,EAAcI,MAAK,SAAAjE,GAAI,OAAIA,EAAKzC,KAAOwG,EAAS/D,KAAKzC,QAErB,IAAzC4E,EAAe+B,QAAQH,EAASxG,KAAcuG,GAChD3B,EAAegC,KAAKJ,EAASxG,IAE/BuG,EAAW,KACJ3B,KAGTyB,EAAU7D,IAAV,uCAAc,WAAMgE,GAAN,SAAAK,EAAA,6DACiC,IAAzCjC,EAAe+B,QAAQH,EAASxG,KAClC4E,EAAegC,KAAKJ,EAASxG,IAFnB,kBAIL4E,GAJK,2CAAd,uDAQFA,EAAekC,SAAQ,SAAAC,GAChBZ,EAAWY,KACdX,EAAOW,GAAS,mBAIbX,IA0YMJ,EApVI,SAAC,GAAyD,IAAvDgB,EAAsD,EAAtDA,aAAcC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,WAAY3F,EAAkB,EAAlBA,KAAMjB,EAAY,EAAZA,MAE5D+F,EAUE9E,EAVF8E,UACAvB,EASEvD,EATFuD,QACAqC,EAQE5F,EARF4F,OACA/F,EAOEG,EAPFH,KACAgG,EAME7F,EANF6F,OACAzE,EAKEpB,EALFoB,KACA0E,EAIE9F,EAJF8F,QACAf,EAGE/E,EAHF+E,cACA7E,EAEEF,EAFFE,MACAD,EACED,EADFC,UAXwE,EAcrCE,oBAAS,GAd4B,mBAcnE4F,EAdmE,KActDC,EAdsD,OAelD7F,mBAAS,IAfyC,mBAenE8F,EAfmE,KAe7DC,EAf6D,OAgBlD/F,mBAAS,IAhByC,mBAgBnEJ,EAhBmE,KAgB7DoG,EAhB6D,KAmBlEC,EAAYC,aAAY,SAAAC,GAAK,MAAK,CACxCF,QAASE,EAAMpF,KAAKE,GAAMmF,WADpBH,QAnBkE,EA+BtEvH,EAAUE,GAPZkD,EAxBwE,EAwBxEA,aACAkB,EAzBwE,EAyBxEA,WACAd,EA1BwE,EA0BxEA,WACAS,EA3BwE,EA2BxEA,YACAE,EA5BwE,EA4BxEA,WACAR,EA7BwE,EA6BxEA,YACAG,EA9BwE,EA8BxEA,YAGFrC,qBAAU,WAGO,WAATT,EACFqG,EAAQ,CAAEpB,UAAW,EAAG0B,MAAO,EAAGjD,QAAS,IACzB,kBAAT1D,GACTqG,EAAQ,CAAEpB,UAAW,EAAG0B,MAAO,EAAGjD,QAAS,MAI9C,CAAC1D,IAEJ,IAAM4G,EAAe,WACnB,OACE,kBAACjG,EAAA,EAAD,CAAMC,WAAS,EAACsD,UAAU,MAAMpD,QAAQ,WAAWf,UAAWuD,GAC5D,kBAAC3C,EAAA,EAAD,CAAMkG,MAAI,EAACC,GAAIV,EAAKnB,UAAW8B,IAAI,IACnC,kBAACpG,EAAA,EAAD,CAAMkG,MAAI,EAACC,GAAIV,EAAKO,MAAOI,IAAI,IAC/B,kBAACpG,EAAA,EAAD,CAAMkG,MAAI,EAACC,GAAIV,EAAK1C,QAASqD,GAAI,GAAIC,GAAI,IACvC,kBAACrG,EAAA,EAAD,CACEC,WAAS,EACTsD,UAAU,MACVb,WAAW,SACXtD,UAAWoD,GAEVO,GACCA,EAAQtC,KAAI,SAACiD,EAAQ/F,GACnB,OACE,yBACEmD,IAAK4C,EAAOhG,MACZ4C,MAAO,CACLwB,QAAS,OACTY,WAAY,WAGd,yBAAKpC,MAAO,CAAEqD,YAAa,OAASvE,UAAW+C,GAC5CxE,EAAQ,EAAI,MAEf,yBAAKyB,UAAW4C,GACb0B,EAAO9C,KAAK0F,uBAoJ3BC,GAAgB,WACpB,IAAIC,EAAU,GACVC,EAAe,GAEN,kBAATpH,GACFmH,EAAU,CACR5F,KAAMpB,EAAKE,MACXgH,KAAM,EACNrD,KAAM,KAERiB,EAAU7D,KAAI,SAAAgE,GAGZ,OAFA+B,EAAQE,MAAyC,GAAjCjC,EAASmB,EAAQnB,EAASxG,KAC1CuI,EAAQnD,MAAyC,GAAjCoB,EAASmB,EAAQnB,EAASxG,KACnCuI,KAETC,EAAa5B,KAAK2B,GAClBb,EAAQc,IAEU,WAATpH,GAAgC,oBAAXgG,GAC9BmB,EAAU,CACR5F,KAAMpB,EAAK8F,QAAQqB,QACnBD,KAAM,EACNrD,KAAMiB,EAAUvE,OAASgD,EAAQhD,QAGnCuE,EAAU7D,KAAI,SAAAgE,GAGZ,OAFA+B,EAAQE,MAAQE,OAAOhB,EAAQnB,EAASxG,KACxCuI,EAAQnD,MAAQuD,OAAOhB,EAAQnB,EAASxG,KACjCuI,KAETC,EAAa5B,KAAK2B,GAClBb,EAAQc,IAEU,WAATpH,GAAsBkF,EAgBb,WAATlF,GAAqBI,IAC9BA,EAAUgB,KAAI,SAAAC,GACZ,OAAO4D,EAAU7D,KAAI,SAAAgE,GACnB,OAAKA,EAASC,SAiBP8B,EAhBAA,EAAQ/B,EAASoC,QAOfL,EAAQ/B,EAASoC,QAAQpC,EAAS/D,KAAKzC,IAIlCuI,EAAQ/B,EAASoC,QAAQpC,EAAS/D,KAAKzC,KAC7C2I,OAAOhB,EAAQnB,EAASxG,KAAO2I,OAAOnC,EAAS/D,KAAKoG,MAJ9CN,EAAQ/B,EAASoC,QAAQpC,EAAS/D,KAAKzC,IAC7C2I,OAAOhB,EAAQnB,EAASxG,KAAO2I,OAAOnC,EAAS/D,KAAKoG,MARhDN,EAAQ/B,EAASoC,QAAjB,aACNjG,KAAM0E,EAAQb,EAASoC,SACtBpC,EAAS/D,KAAKzC,GACb2I,OAAOhB,EAAQnB,EAASxG,KAAO2I,OAAOnC,EAAS/D,KAAKoG,aAgBhEL,EAAeM,OAAOhB,OAAOS,GAC7Bb,EAAQc,KAxCRnC,EAAU7D,KAAI,SAAAgE,GACZ,OAAK+B,EAAQ/B,EAASoC,QAMZL,EAAQ/B,EAASoC,QAAQG,WAAaJ,OAC5ChB,EAAQnB,EAASxG,KANXuI,EAAQ/B,EAASoC,QAAU,CACjCjG,KAAM0E,EAAQb,EAASoC,QACvBG,UAAWJ,OAAOhB,EAAQnB,EAASxG,SAQzCwI,EAAeM,OAAOhB,OAAOS,GAC7Bb,EAAQc,KA+BNQ,GAAQ,uCAAG,WAAM7C,GAAN,SAAAU,EAAA,sEAETyB,KAFS,cAGff,GAAc,GAHC,kBAIRpB,GAJQ,2CAAH,sDAOd,OACE,kBAACpE,EAAA,EAAD,CAAMM,MAAO,CAAE4G,aAAc,SAC3B,0BAAMD,SAAUhC,EAAagC,KAC3B,kBAAC,WAAD,KACGvH,GACC,wBACEY,MAAO,CACL7B,OAAQ,IACRsF,UAAW,SACXpC,QAAS,OACTjD,gBAAiB,UACjBE,MAAO,QACPgE,aAAc,MACdrC,SAAU,SAGXb,EAAM4G,gBAIb,kBAAC,WAAD,MACI/B,GACA,yBAAKjE,MAAO,CAAEiC,UAAW,SAAW0D,MAGxC,kBAACkB,EAAA,EAAD,KACE,kBAAC,WAAD,KAxPgB,SAAA5I,GACtB,OACE+F,GACAA,EAAU7D,KAAI,SAAAgE,GACZ,OAAKA,EAASC,SAuCV,kBAAC1E,EAAA,EAAD,CACEC,WAAS,EACTsD,UAAU,SACVzC,IAAK2D,EAASC,SACdpE,MAAO,CACL1B,MAAO,UACPH,OAAQ,kBAGV,kBAACuB,EAAA,EAAD,CAAMkG,MAAI,EAACE,GAAI,IACb,wBACE9F,MAAO,CACL7B,OAAQ,aACRsF,UAAW,SACXpC,QAAS,OACTjD,gBAAiB,UACjBE,MAAO,QACPgE,aAAc,MACdrC,SAAU,SAGXkE,EAASC,SAAS4B,gBAGvB,kBAACtG,EAAA,EAAD,CACEkG,MAAI,EACJC,GAAI,EACJC,GAAI,GACJ9F,MAAO,CACL2B,UAAW,UACX8B,UAAW,SACXxD,SAAU,OACV6G,YAAa,SAGd3C,EAAS4C,SAEZ,kBAACrH,EAAA,EAAD,CAAMkG,MAAI,EAACE,GAAI,IACZH,MA3EL,kBAACjG,EAAA,EAAD,CACEc,IAAK2D,EAASxG,GACdgC,WAAS,EACTsD,UAAU,MACVb,WAAW,SACXvC,QAAQ,gBACRf,UAAWqC,GAEX,kBAACzB,EAAA,EAAD,CACEkG,MAAI,EACJC,GAAIV,EAAKnB,UACT8B,GAAI,GACJ9F,MAAO,CAAEC,SAAU,SAElBkE,EAAS6C,MAEZ,kBAACtH,EAAA,EAAD,CAAMkG,MAAI,EAACC,GAAIV,EAAKO,MAAOI,IAAI,IAC/B,kBAACpG,EAAA,EAAD,CACEkG,MAAI,EACJC,GAAIV,EAAK1C,QACTqD,GAAI,GACJC,GAAI,GACJjH,UAAWkD,GAEX,kBAACiF,EAAA,EAAD,CACE3G,KAAM6D,EAASxG,GACf8E,QAASA,EACTxE,MAAOA,EACPT,UAAWgF,EACXjB,WAAYA,EACZM,YAAaA,SAoNVqF,CAAgBjJ,IAC3B,kBAAC,WAAD,KA7JJ,kBAAC,WAAD,KACG8G,EACC,kBAAC,EAAD,CAAcrG,SAAUkG,GAAYC,GAClC,kBAAC,WAAD,KAAWC,IAGb,kBAACpF,EAAA,EAAD,CACEkG,MAAI,EACJC,GAAI,GACJ7F,MAAO,CACLF,OAAQ,OACR1B,gBAAiB,UACjBkE,aAAc,MACdnE,OAAQ,SACRuF,QAAS,aAkJjB,kBAAC,WAAD,KAzIa,cAAXqB,EAEA,kBAAC,WAAD,KACGE,GAAeF,GAAU,kBAAC,EAAD,CAAU7F,KAAMA,EAAMD,KAAMA,KAGtC,oBAAX8F,EAEP,kBAAC,WAAD,KACGE,GAAeF,GAAU,kBAAC,EAAD,CAAiB7F,KAAMA,EAAMD,KAAMA,KAG7C,YAAX8F,EAEP,kBAAC,WAAD,KACGE,GAAeF,GAAU,kBAAC,EAAD,CAAS7F,KAAMA,EAAMD,KAAMA,UAHpD,O,SCzXLkI,EAAenG,YAAW,CAC9B9C,KAAM,CACJ0I,aAAc,OACdvI,MAAO,OACP,sBAAuB,CACrBC,MAAO,WAET,8BAA+B,CAC7B8I,kBAAmB,WAErB,2BAA4B,CAC1B,aAAc,CACZC,YAAa,WAEf,mBAAoB,CAClBA,YAAa,WAEf,yBAA0B,CACxBA,YAAa,cAlBArG,CAsBlBsG,KAEC/E,EAAiB,GAiGNoB,cAAU,CACvBvD,KAAM,GACNwD,oBAAoB,EACpBC,SAlGe,SAACC,EAAY5G,GAC5B,IAAM6G,EAAS,GAcf,OAbA7G,EAAMgC,KAAK8E,UAAU7D,KAAI,SAAAgE,GAIvB,OAH6C,IAAzC5B,EAAe+B,QAAQH,EAASxG,KAClC4E,EAAegC,KAAKJ,EAASxG,IAExB4E,KAGTA,EAAekC,SAAQ,SAAAC,GAChBZ,EAAWY,KACdX,EAAOW,GAAS,OAIbX,IAgFMJ,EA7EG,SAAC,GAAkD,IAAhDzE,EAA+C,EAA/CA,KAAMyF,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WACzCb,EAA6B9E,EAA7B8E,UAAWc,EAAkB5F,EAAlB4F,OAAQ1F,EAAUF,EAAVE,MAMrBmI,EAAoB,SAAC,GAAe,IAAb7E,EAAY,EAAZA,MAC3B,OACE,kBAAC,WAAD,KACE,kBAACyE,EAAD,eACExJ,GAAG,4BACH6J,WAAS,EACTC,KAAK,IACL5I,QAAQ,WACR6I,aAAa,OACThF,MAkCZ,OACE,0BAAMiE,SAAUhC,GAPD,SAAAb,GAEf,IAAI2B,EAAS,CAAEnF,KAAMpB,EAAKoB,KAAMmF,OAAQ3B,GACxC6D,QAAQC,IAAInC,OAKV,kBAACoB,EAAA,EAAD,KACGzH,GACC,wBACEY,MAAO,CACL7B,OAAQ,IACRsF,UAAW,SACXpC,QAAS,OACTjD,gBAAiB,UACjBE,MAAO,QACPgE,aAAc,MACdrC,SAAU,SAGXb,EAAM4G,eAGX,kBAAC,WAAD,KA7CGhC,EAAU7D,KAAI,SAACgE,EAAU9G,GAC9B,OACE,kBAACqC,EAAA,EAAD,CAAMC,WAAS,EAACa,IAAK2D,EAASxG,IAC5B,yBAAKqC,MAAO,CAAE7B,OAAQ,kBACnBgG,EAAS6C,MAAQhD,EAAUvE,OAAS,EACjCpC,EAAQ,EAAI,KAAO8G,EAAS6C,KAC5B7C,EAAS6C,KACZ7C,EAAS0D,MACR,yBACEC,yBA7BOC,EA8BL1K,EAAQ,EAAI,KAAO8G,EAAS0D,KA7BnC,CAAEG,OAAQD,OAkCX,kBAACd,EAAA,EAAD,CAAO3G,KAAM6D,EAASxG,GAAIH,UAAW+J,KAnCxB,IAAAQ,MAkEf,kBAAC,EAAD,CAAcrJ,SAAUkG,GAAYC,GAClC,kBAAC,WAAD,KAAWC,S,kkBCjHrB,IA2KemD,EA3KM,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAAkB,EACb/I,mBAAS,IADI,mBAChDgJ,EADgD,KACjCC,EADiC,OAE5BJ,EAAOE,GAA1BhJ,EAF+C,EAE/CA,MAAO2H,EAFwC,EAExCA,QAEfvH,qBAAU,WAEC2I,EAAMI,MAAMpI,KAAI,SAAAjB,GA4BrB,OA3BAmJ,EAAcnJ,EAAKoB,MAAQ,GACT,WAAdpB,EAAKH,KACPG,EAAK8E,UAAU7D,KAAI,SAAAgE,GAUjB,OATKA,EAASC,UACZkE,GAAiB,SAAAE,GAAS,YACrBA,EADqB,eAEvBtJ,EAAKoB,KAFkB,KAGnBkI,EAAUtJ,EAAKoB,MAHI,eAIrB6D,EAASxG,GAAK,WAId,QAGc,kBAAduB,EAAKH,MACdG,EAAK8E,UAAU7D,KAAI,SAAAgE,GAQjB,OAPAmE,GAAiB,SAAAE,GAAS,YACrBA,EADqB,eAEvBtJ,EAAKoB,KAFkB,KAGnBkI,EAAUtJ,EAAKoB,MAHI,eAIrB6D,EAASxG,GAAK,cAGZ,QAGJ,UAIV,IAwGH,OACE,kBAAC,WAAD,KACE,yBAAKA,GAAG,YAEN,kBAAC+B,EAAA,EAAD,KACE,kBAAC,WAAD,KAzGJ,kBAAC,WAAD,MACIN,GAAS2H,IACT,kBAAC,WAAD,KACG3H,GACC,wBACEY,MAAO,CACL5B,gBAAiB,UACjBE,MAAO,QACP+C,QAAS,OACTiB,aAAc,MACdnE,OAAQ,aACR8B,SAAU,SAGXb,EAAM4G,eAGVe,GACC,kBAACrH,EAAA,EAAD,CACEkG,MAAI,EACJC,GAAI,GACJC,GAAI,GACJ9F,MAAO,CACL2B,UAAW,UACX8B,UAAW,SACXxD,SAAU,OACV9B,OAAQ,WAGT4I,MA6EP,kBAAC,WAAD,KAnECoB,EAAMI,MAAMpI,KAAI,SAACjB,EAAM7B,GAC5B,MAAkB,WAAd6B,EAAKH,KAEL,kBAAC0J,EAAA,EAAD,CAAUjI,IAAKnD,IACZ,kBACC,kBAAC,EAAD,CACE6B,KAAMA,EACNkB,KAAMlB,EAAKoB,KACX+H,cAAeA,EAAcnJ,EAAKoB,WAKnB,kBAAdpB,EAAKH,KAGZ,kBAAC0J,EAAA,EAAD,CAAUjI,IAAKnD,IACZ,kBACC,kBAAC,EAAD,CACE6B,KAAMA,EACNkB,KAAMlB,EAAKoB,KACX+H,cAAeA,EAAcnJ,EAAKoB,WAKnB,eAAdpB,EAAKH,KAEZ,kBAAC0J,EAAA,EAAD,CAAUjI,IAAKnD,IACZ,kBACC,kBAAC,EAAD,CACE6B,KAAMA,EACNkB,KAAMlB,EAAKoB,UAOd,WA+BP,yBACEN,MAAO,CACL3B,MAAO,OACPmD,QAAS,OACTW,cAAe,SACfC,WAAY,WAGd,yBACEsG,IAAI,mKACJC,IAAI,SAEN,yBAAK3I,MAAO,CAAEC,SAAU,MAAOgC,UAAW,QAA1C,0DCxJFlE,G,OAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CAEJG,MAAO,OACPD,gBAAiB,SAEnBwK,IAAK,CACH,eAAgB,CACdtK,MAAO,YAGXuK,MAAO,CAAE1K,OAAQ,IAAKE,MAAO,OAAQyK,UAAW,OAAQzH,QAAS,eA4EpD0H,EAxEK,WAAO,IACjBb,EAAWc,OAAO9L,MAAP,GAAXgL,OACFvJ,EAAUZ,IAFQ,EAGEsB,mBAAS,GAHX,mBAGjBjC,EAHiB,KAGV6L,EAHU,KAMlBC,EAAe,SAACC,EAAOC,GAC3BH,EAASG,IA+CX,OACE,kBAAC1J,EAAA,EAAD,CAAMC,WAAS,EAACb,UAAWH,EAAQT,KAAM2B,QAAQ,SAASlC,GAAG,OAS3D,kBAAC+B,EAAA,EAAD,CAAMkG,MAAI,GApDV,kBAACyD,EAAA,EAAD,CAAQC,SAAS,QAAQhL,MAAM,WAC7B,kBAACiL,EAAA,EAAD,CACEnM,MAAOA,EACPoM,SAAUN,EACVrK,QAAQ,aACR4K,cAAc,OACdC,aAAW,+BACXC,kBAAmB,CACjB3J,MAAO,CACL5B,gBAAiB,aAIpB8J,EAAO/H,KAAI,SAACgI,EAAO9K,GAClB,OACE,kBAACuM,EAAA,EAAD,eACEpJ,IAAKnD,EACLwM,MAAO1B,EAAM7H,MArDX,SAAAjD,GAChB,MAAO,CACLM,GAAG,uBAAD,OAAyBN,GAC3B,gBAAgB,4BAAhB,OAA6CA,IAmD7ByM,CAAUzM,GAHhB,CAIEyB,UAAWH,EAAQiK,aAkC7B,kBAAClJ,EAAA,EAAD,CAAMkG,MAAI,EAACmE,GAAI,EAAGlE,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAxBjCmC,EAAO/H,KAAI,SAACgI,EAAO9K,GACxB,OACE,kBAAC,EAAD,CAAUD,MAAOA,EAAOC,MAAOA,EAAOmD,IAAKnD,GACzC,kBAACqC,EAAA,EAAD,CAAMM,MAAO,CAAEgK,WAAY,SACzB,kBAAC,IAAD,CAAOlL,UAAWH,EAAQkK,OACxB,kBAAC,EAAD,CAAcV,MAAOA,EAAOD,OAAQA,EAAQE,YAAa/K,a,oBC7EjEY,GAAQgM,aAAe,CAC3BnI,QAAS,CACPC,QAAS,CAAEmI,KAAM,WACjBC,UAAW,CAAED,KAAM,WACnBE,MAAO,CACLC,EAAG,UACHC,EAAG,UACHC,EAAG,WAELvD,KAAM,CAAEjF,QAAS,YAEnBT,QAAS,SAAAkJ,GAAM,MAAI,CAAC,EAAG,EAAG,EAAG,GAAI,IAAIA,IACrCC,YAAa,CACX1E,GAAI,IACJD,GAAI,QACJD,GAAI,QACJkE,GAAI,SACJW,GAAI,UAENC,UAAW,CACTC,MAAO,GACPC,OAAQ,GACRC,MAAO,GAEPC,GAAI,CACFjF,GAAI,GACJD,GAAI,GACJkE,GAAI,IAENiB,GAAI,CACFlF,GAAI,GACJD,GAAI,GACJkE,GAAI,IAENkB,GAAI,CACFnF,GAAI,GACJD,GAAI,GACJkE,GAAI,IAENmB,GAAI,CACFpF,GAAI,GACJD,GAAI,GACJkE,GAAI,IAENoB,GAAI,CACFrF,GAAI,GACJD,GAAI,GACJkE,GAAI,OAsBKqB,GAjBH,WACV,OACE,kBAACC,GAAA,EAAD,CAAepN,MAAOA,IACpB,yBACEa,UAAU,MACVkB,MAAO,CACLwB,QAAS,OACTC,eAAgB,SAChBpD,MAAO,UAGT,kBAAC,EAAD,S,UCjEOiN,eAAgB,CAC7BlL,KAAMmL,OCOFC,GAAmBxC,OAAOyC,sCAAwCC,IAClEC,GAAQC,YACZC,GACAL,GAAiBM,YAAgBC,OAGnCC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,IACf,kBAAC,GAAD,OAEFO,SAASC,cAAc,Y","file":"static/js/main.5d35e404.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\n\nconst TabPanel = props => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n};\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nexport default TabPanel;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: \"10px 0 50px 0\",\n    backgroundColor: \"#b71b53\",\n    width: \"300px\",\n    \"@media (max-width: 800px)\": {\n      width: \"100%\"\n    },\n    color: \"white\",\n    border: \"none\",\n    \"&:hover\": {\n      backgroundColor: \"#353535\"\n    },\n    \"&:disabled\": { backgroundColor: \"#353535\", color: \"white\" }\n  }\n}));\n\nconst SubmitButton = ({ children, onClick, disabled }) => {\n  const classes = useStyles();\n  return (\n    <Button\n      variant=\"outlined\"\n      onClick={onClick}\n      className={classes.root}\n      type=\"submit\"\n      disabled={disabled}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default SubmitButton;\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n  BarChart as Chart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Legend,\n  Cell\n} from \"recharts\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst BarChart = ({ data, test }) => {\n  const { dataForms, topic } = test;\n  const [chartHeight, setChartHeight] = useState(200);\n\n  useEffect(() => {\n    if (dataForms) {\n      setChartHeight(200 + dataForms.length * 100);\n    } else {\n      setChartHeight(200);\n    }\n  }, [chartHeight, dataForms]);\n\n  const renderBars = () => {\n    const colors = [\n      \"#b71b60\",\n      \"#353535\",\n      \"#949b9f\",\n      \"#b71b60\",\n      \"#353535\",\n      \"#949b9f\",\n      \"#b71b60\",\n      \"#353535\",\n      \"#949b9f\",\n      \"#b71b60\",\n      \"#353535\",\n      \"#949b9f\"\n    ];\n    if (dataForms) {\n      // MULTIPLE FORMS CASE\n      return dataForms.map((form, index) => (\n        <Bar\n          dataKey={form.id}\n          name={form.name}\n          fill={colors[index]}\n          key={form.id}\n        />\n      ));\n    } else {\n      // SINGLE FORM CASE\n      return (\n        <Bar dataKey=\"testTotal\" name={topic}>\n          {data.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={colors[index]} />\n          ))}\n        </Bar>\n      );\n    }\n  };\n\n  return (\n    <Grid container mt={5} justify=\"center\">\n      <ResponsiveContainer width=\"100%\" height={chartHeight}>\n        <Chart data={data} layout=\"vertical\" style={{ fontSize: \"12px\" }}>\n          <XAxis type=\"number\" />\n          {renderBars()}\n          <YAxis dataKey=\"name\" reversed type=\"category\" />\n          <Legend />\n        </Chart>\n      </ResponsiveContainer>\n    </Grid>\n  );\n};\n\nexport default BarChart;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  BarChart as Chart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer\n} from \"recharts\";\n\nconst StackedBarChart = ({ data }) => {\n  return (\n    <Grid container mt={5} justify=\"center\">\n      <ResponsiveContainer width=\"100%\" height={200}>\n        <Chart data={data} layout=\"vertical\" style={{ fontSize: \"12px\" }}>\n          <XAxis type=\"number\" />\n          <YAxis dataKey=\"name\" reversed type=\"category\" />\n          <Bar dataKey=\"mark\" stackId=\"a\" name=\"Mon score\" fill=\"#b71b60\" />\n          <Bar\n            dataKey=\"rest\"\n            stackId=\"a\"\n            name=\"Autopositionnement\"\n            fill=\"#949b9f\"\n          />\n        </Chart>\n      </ResponsiveContainer>\n    </Grid>\n  );\n};\n\nexport default StackedBarChart;\n","import React from \"react\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import Grid from \"@material-ui/core/Grid\";\n\n// const useStyles = makeStyles(theme => ({\n//   questionLine: {\n//     borderBottom: \"1px solid rgba(75,75,75,0.2)\",\n//     padding: \"20px 0\"\n//   }\n// }));\n\nconst XYChart = () => {\n  // const classes = useStyles();\n\n  return <div>Le rendu sera intégré dans les prochains jours.</div>;\n};\n\nexport default XYChart;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { useSelector } from \"react-redux\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport SubmitButton from \"../submit-button/SubmitButton\";\nimport BarChart from \"../../results/bar-chart/BarChart\";\nimport StackedBarChart from \"../../results/stacked-bar-chart/StackedBarChart\";\nimport XYChart from \"../../results/xy-chart/XYChart\";\n\nconst CustomRadio = withStyles({\n  root: {\n    color: \"#b71b53\",\n    margin: `0, auto`\n  },\n  checked: { color: \"#b71b53\" }\n})(props => <Radio color=\"default\" {...props} />);\n\nconst useStyles = makeStyles(theme => ({\n  questionLine: {\n    borderBottom: \"1px solid rgba(75,75,75,0.2)\",\n    padding: theme.spacing(2, 0)\n  },\n  radioBlock: {\n    // opacity: props => `${0.5 + Number(props.value) / 15}`,\n    width: \"100px\",\n    \"@media (max-width: 700px)\": {\n      width: \"45px\",\n      margin: 0\n    },\n    display: \"flex\",\n    margin: `${theme.spacing(0)}, auto`,\n    justifyContent: \"space-around\"\n  },\n  answerBlock: {\n    width: \"100px\",\n    fontSize: \"12px\",\n    textAlign: \"left\",\n    fontWeight: \"600\",\n    \"@media (max-width: 700px)\": {\n      width: \"100%\",\n      margin: \"4px 0\"\n    }\n  },\n  answerIndex: {\n    fontSize: \"10px\",\n    fontWeight: \"600\",\n    color: theme.palette.primary,\n    display: \"none\",\n    textAlign: \"center\",\n\n    \"@media (max-width: 700px)\": {\n      display: \"block\"\n    }\n  },\n  buttonsLine: {\n    display: \"flex\",\n    \"@media (max-width: 1000px)\": {\n      justifyContent: \"center\",\n      marginTop: theme.spacing(2)\n    }\n  },\n  headerLine: {\n    display: \"flex\",\n    \"@media (max-width: 1000px)\": {\n      justifyContent: \"center\",\n      textAlign: \"center\"\n    },\n    \"@media (max-width: 700px)\": {\n      flexDirection: \"column\",\n      justifyContent: \"flex-start\",\n      alignItems: \"flex-start\",\n      textAlign: \"left\"\n    }\n  },\n\n  quizHeader: {\n    borderRadius: theme.spacing(1),\n    padding: theme.spacing(2),\n    color: \"#353535\",\n    border: \"2px solid #b71b53\"\n  }\n}));\n\nlet requiredFields = [];\n\n// IN ORDER TO VALIDATE FORM ONLY IF ALL EXPECTED INPUT ARE CHECKED / FILLED\nconst validate = (formValues, props) => {\n  const errors = {};\n  const { questions, requiredForms } = props.test;\n  let findForm = null;\n  if (requiredForms) {\n    questions.map(question => {\n      if (!question.subTopic) {\n        findForm = requiredForms.find(form => form.id === question.form.id);\n      }\n      if (requiredFields.indexOf(question.id) === -1 && findForm) {\n        requiredFields.push(question.id);\n      }\n      findForm = null;\n      return requiredFields;\n    });\n  } else {\n    questions.map(async question => {\n      if (requiredFields.indexOf(question.id) === -1) {\n        requiredFields.push(question.id);\n      }\n      return requiredFields;\n    });\n  }\n\n  requiredFields.forEach(field => {\n    if (!formValues[field]) {\n      errors[field] = \"Champ requis\";\n    }\n  });\n\n  return errors;\n};\n\n/* BUTTON LINE */\nconst radioButtons = ({\n  answers,\n  salut,\n  input,\n  radioBlock,\n  answerIndex,\n  theme,\n  meta: { error, touched },\n  ...rest\n}) => (\n  <FormControl>\n    <Grid container direction=\"row\" alignItems=\"center\">\n      <RadioGroup {...input} {...rest} row>\n        {answers.map((answer, index) => {\n          return (\n            <div\n              key={answer.value}\n              style={{\n                display: \"flex\",\n                alignItems: \"center\"\n              }}\n            >\n              <div style={{ marginRight: \"-6px\" }} className={answerIndex}>\n                {index + 1 + \". \"}\n              </div>\n              <FormControlLabel\n                className={radioBlock}\n                value={answer.value.toString()}\n                control={<CustomRadio theme={theme} />}\n              />\n            </div>\n          );\n        })}\n      </RadioGroup>\n      <h5\n        style={{\n          color: \"#353535\",\n          fontSize: \"12px\",\n          margin: 0,\n          fontStyle: \"italic\",\n          opacity: \"0.6\"\n        }}\n      >\n        {touched && error}\n      </h5>\n    </Grid>\n  </FormControl>\n);\n\n/* MAIN COMPONENT */\nconst LikertForm = ({ handleSubmit, pristine, submitting, test, theme }) => {\n  const {\n    questions,\n    answers,\n    button,\n    type,\n    result,\n    name,\n    drivers,\n    requiredForms,\n    topic,\n    dataForms\n  } = test;\n\n  const [isCompleted, setCompletion] = useState(false);\n  const [size, setSize] = useState({});\n  const [data, setData] = useState([]);\n\n  // REACT-REDUX WITH HOOKS, REPLACE MAPSTATETOPROPS\n  const { results } = useSelector(state => ({\n    results: state.form[name].values\n  }));\n  // const theme = useTheme();\n  const {\n    questionLine,\n    quizHeader,\n    radioBlock,\n    buttonsLine,\n    headerLine,\n    answerBlock,\n    answerIndex\n  } = useStyles(theme);\n\n  useEffect(() => {\n    // ADAPT SIZE WHETHER IT'S A LIKERT SCALE OR A TRUE/FALSE\n    const resize = () => {\n      if (type === \"likert\") {\n        setSize({ questions: 3, blank: 1, answers: 8 });\n      } else if (type === \"true-or-false\") {\n        setSize({ questions: 7, blank: 1, answers: 4 });\n      }\n    };\n    resize();\n  }, [type]);\n\n  const renderHeader = () => {\n    return (\n      <Grid container direction=\"row\" justify=\"flex-end\" className={quizHeader}>\n        <Grid item md={size.questions} sm={false} />\n        <Grid item md={size.blank} sm={false} />\n        <Grid item md={size.answers} sm={12} xs={12}>\n          <Grid\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            className={headerLine}\n          >\n            {answers &&\n              answers.map((answer, index) => {\n                return (\n                  <div\n                    key={answer.value}\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\"\n                    }}\n                  >\n                    <div style={{ marginRight: \"4px\" }} className={answerIndex}>\n                      {index + 1 + \". \"}\n                    </div>\n                    <div className={answerBlock}>\n                      {answer.name.toUpperCase()}\n                    </div>\n                  </div>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  const renderQuestions = theme => {\n    return (\n      questions &&\n      questions.map(question => {\n        if (!question.subTopic) {\n          return (\n            <Grid\n              key={question.id}\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justify=\"space-between\"\n              className={questionLine}\n            >\n              <Grid\n                item\n                md={size.questions}\n                sm={12}\n                style={{ fontSize: \"14px\" }}\n              >\n                {question.text}\n              </Grid>\n              <Grid item md={size.blank} sm={false} />\n              <Grid\n                item\n                md={size.answers}\n                sm={12}\n                xs={12}\n                className={buttonsLine}\n              >\n                <Field\n                  name={question.id}\n                  answers={answers}\n                  theme={theme}\n                  component={radioButtons}\n                  radioBlock={radioBlock}\n                  answerIndex={answerIndex}\n                />\n              </Grid>\n            </Grid>\n          );\n        } else {\n          return (\n            <Grid\n              container\n              direction=\"column\"\n              key={question.subTopic}\n              style={{\n                color: \"#353535\",\n                margin: \"30px 0 20px 0\"\n              }}\n            >\n              <Grid item sm={12}>\n                <h4\n                  style={{\n                    margin: \"0 0 10px 0\",\n                    fontStyle: \"italic\",\n                    padding: \"10px\",\n                    backgroundColor: \"#b71b60\",\n                    color: \"white\",\n                    borderRadius: \"5px\",\n                    fontSize: \"14px\"\n                  }}\n                >\n                  {question.subTopic.toUpperCase()}\n                </h4>\n              </Grid>\n              <Grid\n                item\n                md={7}\n                sm={12}\n                style={{\n                  textAlign: \"justify\",\n                  fontStyle: \"italic\",\n                  fontSize: \"14px\",\n                  paddingLeft: \"10px\"\n                }}\n              >\n                {question.wording}\n              </Grid>\n              <Grid item sm={12}>\n                {renderHeader()}\n              </Grid>\n            </Grid>\n          );\n        }\n      })\n    );\n  };\n\n  const renderSubmitButton = () => {\n    return (\n      <Fragment>\n        {result ? (\n          <SubmitButton disabled={pristine || submitting}>\n            <Fragment>{button}</Fragment>\n          </SubmitButton>\n        ) : (\n          <Grid\n            item\n            md={12}\n            style={{\n              height: \"10px\",\n              backgroundColor: \"#b71b53\",\n              borderRadius: \"5px\",\n              margin: \"50px 0\",\n              opacity: \"0.5\"\n            }}\n          />\n        )}\n      </Fragment>\n    );\n  };\n\n  const renderResult = () => {\n    if (result === \"histogram\") {\n      return (\n        <Fragment>\n          {isCompleted && result && <BarChart test={test} data={data} />}\n        </Fragment>\n      );\n    } else if (result === \"stackedBarChart\") {\n      return (\n        <Fragment>\n          {isCompleted && result && <StackedBarChart test={test} data={data} />}\n        </Fragment>\n      );\n    } else if (result === \"xyChart\") {\n      return (\n        <Fragment>\n          {isCompleted && result && <XYChart test={test} data={data} />}\n        </Fragment>\n      );\n    }\n  };\n\n  // FORMAT THE DATA SO IT MATCHES WITH BARCHART FORMAT\n  const formatResults = () => {\n    let rawData = {};\n    let formatedData = [];\n    // TRUE OR FALSE CASE\n    if (type === \"true-or-false\") {\n      rawData = {\n        name: test.topic,\n        mark: 0,\n        rest: 100\n      };\n      questions.map(question => {\n        rawData.mark += question[results[question.id]] * 10;\n        rawData.rest -= question[results[question.id]] * 10;\n        return rawData;\n      });\n      formatedData.push(rawData);\n      setData(formatedData);\n      // LIKERT - SINGLE FORM CASE - STACKED BAR\n    } else if (type === \"likert\" && result === \"stackedBarChart\") {\n      rawData = {\n        name: test.drivers.driver1,\n        mark: 0,\n        rest: questions.length * answers.length\n      };\n\n      questions.map(question => {\n        rawData.mark += Number(results[question.id]);\n        rawData.rest -= Number(results[question.id]);\n        return rawData;\n      });\n      formatedData.push(rawData);\n      setData(formatedData);\n      // LIKERT - SINGLE FORM CASE\n    } else if (type === \"likert\" && !requiredForms) {\n      questions.map(question => {\n        if (!rawData[question.driver]) {\n          return (rawData[question.driver] = {\n            name: drivers[question.driver],\n            testTotal: Number(results[question.id])\n          });\n        } else {\n          return (rawData[question.driver].testTotal += Number(\n            results[question.id]\n          ));\n        }\n      });\n      formatedData = Object.values(rawData);\n      setData(formatedData);\n      // LIKERT - MULTIPLE FORM CASE\n    } else if (type === \"likert\" && dataForms) {\n      dataForms.map(form => {\n        return questions.map(question => {\n          if (!question.subTopic) {\n            if (!rawData[question.driver]) {\n              return (rawData[question.driver] = {\n                name: drivers[question.driver],\n                [question.form.id]:\n                  Number(results[question.id]) * Number(question.form.coef)\n              });\n            } else {\n              if (!rawData[question.driver][question.form.id]) {\n                return (rawData[question.driver][question.form.id] =\n                  Number(results[question.id]) * Number(question.form.coef));\n              } else {\n                return (rawData[question.driver][question.form.id] +=\n                  Number(results[question.id]) * Number(question.form.coef));\n              }\n            }\n          }\n          return rawData;\n        });\n      });\n\n      formatedData = Object.values(rawData);\n      setData(formatedData);\n    }\n  };\n\n  const onSubmit = async formValues => {\n    // no need e.preventdefault as handleSubmit handles it\n    await formatResults();\n    setCompletion(true);\n    return formValues;\n  };\n\n  return (\n    <Grid style={{ marginBottom: \"30px\" }}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Fragment>\n          {topic && (\n            <h4\n              style={{\n                margin: \"0\",\n                fontStyle: \"italic\",\n                padding: \"10px\",\n                backgroundColor: \"#b71b60\",\n                color: \"white\",\n                borderRadius: \"5px\",\n                fontSize: \"14px\"\n              }}\n            >\n              {topic.toUpperCase()}\n            </h4>\n          )}\n        </Fragment>\n        <Fragment>\n          {!requiredForms && (\n            <div style={{ marginTop: \"10px\" }}>{renderHeader()}</div>\n          )}\n        </Fragment>\n        <FormGroup>\n          <Fragment>{renderQuestions(theme)}</Fragment>\n          <Fragment>{renderSubmitButton()}</Fragment>\n        </FormGroup>\n      </form>\n      <Fragment>{renderResult()}</Fragment>\n    </Grid>\n  );\n};\n\n// FORM NAME IS DEFINED IN FORMNAME PARENT ON EXERCISE PAGE\nexport default reduxForm({ form: \"\", enableReinitialize: true, validate })(\n  LikertForm\n);\n","import React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SubmitButton from \"../submit-button/SubmitButton\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\n\nconst CssTextField = withStyles({\n  root: {\n    marginBottom: \"10px\",\n    width: \"100%\",\n    \"& label.Mui-focused\": {\n      color: \"#b71b60\"\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"#b71b60\"\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"#b71b60\"\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"#353535\"\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"#b71b60\"\n      }\n    }\n  }\n})(TextField);\n\nlet requiredFields = [];\n\nconst validate = (formValues, props) => {\n  const errors = {};\n  props.test.questions.map(question => {\n    if (requiredFields.indexOf(question.id) === -1) {\n      requiredFields.push(question.id);\n    }\n    return requiredFields;\n  });\n\n  requiredFields.forEach(field => {\n    if (!formValues[field]) {\n      errors[field] = \"\";\n    }\n  });\n\n  return errors;\n};\n\nconst FreeField = ({ test, handleSubmit, pristine, submitting }) => {\n  const { questions, button, topic } = test;\n\n  const createMarkup = element => {\n    return { __html: element };\n  };\n\n  const renderCustomInput = ({ input }) => {\n    return (\n      <Fragment>\n        <CssTextField\n          id=\"outlined-multiline-static\"\n          multiline\n          rows=\"6\"\n          variant=\"outlined\"\n          autoComplete=\"off\"\n          {...input}\n        />\n      </Fragment>\n    );\n  };\n\n  const renderInputs = () => {\n    return questions.map((question, index) => {\n      return (\n        <Grid container key={question.id}>\n          <div style={{ margin: \"30px 0 10px 0\" }}>\n            {question.text && questions.length > 1\n              ? index + 1 + \". \" + question.text\n              : question.text}\n            {question.html && (\n              <div\n                dangerouslySetInnerHTML={createMarkup(\n                  index + 1 + \". \" + question.html\n                )}\n              />\n            )}\n          </div>\n          <Field name={question.id} component={renderCustomInput} />\n        </Grid>\n      );\n    });\n  };\n\n  const onSubmit = formValues => {\n    // SEND TO API\n    let values = { name: test.name, values: formValues };\n    console.log(values);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <FormGroup>\n        {topic && (\n          <h4\n            style={{\n              margin: \"0\",\n              fontStyle: \"italic\",\n              padding: \"10px\",\n              backgroundColor: \"#b71b60\",\n              color: \"white\",\n              borderRadius: \"5px\",\n              fontSize: \"14px\"\n            }}\n          >\n            {topic.toUpperCase()}\n          </h4>\n        )}\n        <Fragment>{renderInputs()}</Fragment>\n        <SubmitButton disabled={pristine || submitting}>\n          <Fragment>{button}</Fragment>\n        </SubmitButton>\n      </FormGroup>\n    </form>\n  );\n};\n\nexport default reduxForm({\n  form: \"\",\n  enableReinitialize: true,\n  validate\n})(FreeField);\n","import React, { Fragment, useState, useEffect } from \"react\";\n// import jsPDF from \"jspdf\";\n// import html2canvas from \"html2canvas\";\nimport LikertForm from \"../../components/forms/likert-form/LikertForm\";\nimport FreeField from \"../../components/forms/free-field/FreeField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { FormName } from \"redux-form\";\n// import XYChart from \"../results/xy-chart/XYChart\";\n\nconst ExercisePage = ({ skills, skill, parentIndex }) => {\n  const [initialValues, setInitialValues] = useState({});\n  const { topic, wording } = skills[parentIndex];\n\n  useEffect(() => {\n    const renderInitialValues = () => {\n      return skill.tests.map(test => {\n        initialValues[test.name] = {};\n        if (test.type === \"likert\") {\n          test.questions.map(question => {\n            if (!question.subTopic) {\n              setInitialValues(prevState => ({\n                ...prevState,\n                [test.name]: {\n                  ...prevState[test.name],\n                  [question.id]: \"3\"\n                }\n              }));\n            }\n            return null;\n          });\n          // console.log(initialValues);\n        } else if (test.type === \"true-or-false\") {\n          test.questions.map(question => {\n            setInitialValues(prevState => ({\n              ...prevState,\n              [test.name]: {\n                ...prevState[test.name],\n                [question.id]: \"true\"\n              }\n            }));\n            return null;\n          });\n        }\n        return null;\n      });\n    };\n    renderInitialValues();\n  }, []);\n\n  const renderWording = () => {\n    return (\n      <Fragment>\n        {(topic || wording) && (\n          <Fragment>\n            {topic && (\n              <h3\n                style={{\n                  backgroundColor: \"#353535\",\n                  color: \"white\",\n                  padding: \"10px\",\n                  borderRadius: \"5px\",\n                  margin: \"0 0 10px 0\",\n                  fontSize: \"16px\"\n                }}\n              >\n                {topic.toUpperCase()}\n              </h3>\n            )}\n            {wording && (\n              <Grid\n                item\n                md={12}\n                sm={12}\n                style={{\n                  textAlign: \"justify\",\n                  fontStyle: \"italic\",\n                  fontSize: \"14px\",\n                  margin: \"20px 0\"\n                }}\n              >\n                {wording}\n              </Grid>\n            )}\n          </Fragment>\n        )}\n      </Fragment>\n    );\n  };\n\n  const renderTestType = () => {\n    return skill.tests.map((test, index) => {\n      if (test.type === \"likert\") {\n        return (\n          <FormName key={index}>\n            {() => (\n              <LikertForm\n                test={test}\n                form={test.name}\n                initialValues={initialValues[test.name]}\n              />\n            )}\n          </FormName>\n        );\n      } else if (test.type === \"true-or-false\") {\n        // console.log(initialValues);\n        return (\n          <FormName key={index}>\n            {() => (\n              <LikertForm\n                test={test}\n                form={test.name}\n                initialValues={initialValues[test.name]}\n              />\n            )}\n          </FormName>\n        );\n      } else if (test.type === \"free-field\") {\n        return (\n          <FormName key={index}>\n            {() => (\n              <FreeField\n                test={test}\n                form={test.name}\n                // initialValues={initialValues}\n              />\n            )}\n          </FormName>\n        );\n      }\n      return null;\n    });\n  };\n\n  // const printPdf = () => {\n  //   const input = document.getElementById(\"to-print\");\n\n  //   html2canvas(input).then(canvas => {\n  //     const imgData = canvas.toDataURL(\"image/png\");\n  //     const pdf = new jsPDF(\"p\", \"pt\", \"a4\", true);\n\n  //     pdf.addImage(imgData, \"PNG\", 0, 0, 270, 270);\n  //     pdf.save(`${skill.name}.pdf`);\n  //   });\n  // };\n\n  const newData = { name: \"style\", x: 32, y: 24 };\n\n  const tests = {\n    questions: [\"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n  };\n\n  return (\n    <Fragment>\n      <div id=\"to-print\">\n        {/* <XYChart test={tests} date={newData} /> */}\n        <Grid>\n          <Fragment>{renderWording()}</Fragment>\n          <Fragment>{renderTestType()}</Fragment>\n        </Grid>\n      </div>\n      <div\n        style={{\n          width: \"100%\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\"\n        }}\n      >\n        <img\n          src=\"https://kedge.edu/var/kedge/storage/images/media/images/home-page/logos-sites/logo-site-kedge/1297039-1-fre-FR/xlogo-site-kedge.png.pagespeed.ic.O3c5-ntvte.webp\"\n          alt=\"logo\"\n        />\n        <div style={{ fontSize: \"8px\", marginTop: \"8px\" }}>\n          © Association Groupe Kedge Business School, 2019\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default ExercisePage;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TabPanel from \"../../components/tab-panel/TabPanel\";\nimport Paper from \"@material-ui/core/Grid\";\nimport ExercisePage from \"../../components/exercise-page/ExercisePage\";\nimport \"./temporary.css\";\n\nconst a11yProps = index => {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    \"aria-controls\": `scrollable-auto-tabpanel-${index}`\n  };\n};\n\nconst language = \"fr\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    // flexGrow: 1,\n    width: \"100%\",\n    backgroundColor: \"white\"\n  },\n  tab: {\n    \"&:last-child\": {\n      color: \"#b71b53\"\n    }\n  },\n  paper: { margin: \"0\", width: \"100%\", overflowX: \"auto\", padding: \"20px 0\" }\n}));\n\n/* MAIN COMPONENT */\nconst ProfilerApp = () => {\n  const { skills } = window.props[language];\n  const classes = useStyles();\n  const [value, setValue] = useState(0);\n  // const [popUp, setPopUp] = useState(true);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const renderTabs = () => {\n    return (\n      <AppBar position=\"fixed\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n          TabIndicatorProps={{\n            style: {\n              backgroundColor: \"#b71b53\"\n            }\n          }}\n        >\n          {skills.map((skill, index) => {\n            return (\n              <Tab\n                key={index}\n                label={skill.name}\n                {...a11yProps(index)}\n                className={classes.tab}\n              />\n            );\n          })}\n        </Tabs>\n      </AppBar>\n    );\n  };\n\n  const renderPanel = () => {\n    return skills.map((skill, index) => {\n      return (\n        <TabPanel value={value} index={index} key={index}>\n          <Grid style={{ paddingTop: \"40px\" }}>\n            <Paper className={classes.paper}>\n              <ExercisePage skill={skill} skills={skills} parentIndex={index} />\n            </Paper>\n          </Grid>\n        </TabPanel>\n      );\n    });\n  };\n\n  return (\n    <Grid container className={classes.root} justify=\"center\" id=\"app\">\n      {/* {popUp && (\n        <div id=\"pop-up\">\n          <div className=\"content\">\n            <i className=\"fas fa-times\" onClick={() => setPopUp(false)}></i>\n            <div>Le responsive mobile est en cours d'optimisation.</div>\n          </div>\n        </div>\n      )} */}\n      <Grid item>{renderTabs()}</Grid>\n      <Grid item lg={9} md={12} sm={12} xs={12}>\n        {renderPanel()}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ProfilerApp;\n","import React from \"react\";\nimport ProfilerApp from \"./container/profiler-app/ProfilerApp\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: \"#b71b53\" },\n    secondary: { main: \"#353535\" },\n    chart: {\n      0: \"#b71b53\",\n      1: \"#353535\",\n      2: \"#949b9f\"\n    },\n    text: { primary: \"#353535\" }\n  },\n  spacing: factor => [0, 4, 8, 16, 32][factor],\n  breakpoints: {\n    xs: \"0\",\n    sm: \"600px\",\n    md: \"960px\",\n    lg: \"1280px\",\n    xl: \"1920px\"\n  },\n  fontSizes: {\n    small: 14,\n    medium: 16,\n    large: 18,\n\n    h5: {\n      sm: 12,\n      md: 14,\n      lg: 16\n    },\n    h4: {\n      sm: 16,\n      md: 18,\n      lg: 22\n    },\n    h3: {\n      sm: 19,\n      md: 22,\n      lg: 28\n    },\n    h2: {\n      sm: 20,\n      md: 22,\n      lg: 24\n    },\n    h1: {\n      sm: 24,\n      md: 26,\n      lg: 30\n    }\n  }\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <div\n        className=\"App\"\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          width: \"100vw\"\n        }}\n      >\n        <ProfilerApp />\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nexport default combineReducers({\n  form: formReducer\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport reducers from \"./reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}