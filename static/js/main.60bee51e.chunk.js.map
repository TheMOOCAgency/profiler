{"version":3,"sources":["components/tab-panel/TabPanel.jsx","components/forms/submit-button/SubmitButton.jsx","components/results/bar-chart/BarChart.jsx","components/results/stacked-bar-chart/StackedBarChart.jsx","components/forms/likert-form/LikertForm.jsx","components/forms/free-field/FreeField.jsx","components/exercise-page/ExercisePage.jsx","container/profiler-app/ProfilerApp.jsx","App.jsx","reducers/index.js","index.js"],"names":["TabPanel","props","children","value","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","useStyles","makeStyles","theme","root","margin","backgroundColor","width","color","border","SubmitButton","onClick","disabled","classes","Button","variant","className","type","BarChart","data","test","requiredForms","topic","useState","chartHeight","setChartHeight","useEffect","length","Grid","container","mt","justify","height","layout","style","fontSize","colors","map","form","dataKey","name","fill","key","renderBars","reversed","StackedBarChart","stackId","CustomRadio","withStyles","checked","Radio","questionLine","borderBottom","padding","requiredFields","radioButtons","answers","input","salut","meta","error","touched","rest","FormControl","direction","alignItems","RadioGroup","row","answer","FormControlLabel","opacity","display","justifyContent","toString","control","reduxForm","enableReinitialize","validate","formValues","errors","questions","question","indexOf","push","forEach","field","handleSubmit","pristine","submitting","button","wording","result","drivers","isCompleted","setCompletion","size","setSize","setData","results","useSelector","state","values","blank","formatResults","rawData","formatedData","mark","console","log","subTopic","driver","Number","coef","Object","testTotal","onSubmit","a","marginBottom","FormGroup","borderRadius","marginTop","toUpperCase","item","md","sm","textAlign","fontStyle","fontWeight","whiteSpace","text","Field","CssTextField","borderBottomColor","borderColor","TextField","renderCustomInput","multiline","rows","autoComplete","ExercisePage","skills","skill","parentIndex","tests","FormName","tab","paper","overflowX","ProfilerApp","window","setValue","handleChange","event","newValue","AppBar","position","Tabs","onChange","scrollButtons","aria-label","TabIndicatorProps","Tab","label","a11yProps","lg","xs","paddingTop","App","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.60bee51e.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\n\nconst TabPanel = props => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n};\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nexport default TabPanel;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: \"10px 0 50px 0\",\n    backgroundColor: \"#353535\",\n    width: \"300px\",\n    color: \"white\",\n    border: \"none\",\n    \"&:hover\": {\n      backgroundColor: \"#b71b53\"\n    }\n  }\n}));\n\nconst SubmitButton = ({ children, onClick, disabled }) => {\n  const classes = useStyles();\n  return (\n    <Button\n      variant=\"outlined\"\n      onClick={onClick}\n      className={classes.root}\n      type=\"submit\"\n      disabled={disabled}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default SubmitButton;\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n  BarChart as Chart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Legend\n} from \"recharts\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst BarChart = ({ data, test }) => {\n  const { requiredForms, topic } = test;\n  const [chartHeight, setChartHeight] = useState(200);\n\n  useEffect(() => {\n    if (requiredForms) {\n      setChartHeight(200 + requiredForms.length * 100);\n    } else {\n      setChartHeight(200);\n    }\n  }, [chartHeight, requiredForms]);\n\n  const renderBars = () => {\n    const colors = [\"#b71b60\", \"#353535\", \"#949b9f\"];\n    if (requiredForms) {\n      // MULTIPLE FORMS CASE\n      return requiredForms.map((form, index) => (\n        <Bar\n          dataKey={form.id}\n          name={form.name}\n          fill={colors[index]}\n          key={form.id}\n        />\n      ));\n    } else {\n      // SINGLE FORM CASE\n      return <Bar dataKey=\"testTotal\" name={topic} fill={colors[0]} />;\n    }\n  };\n\n  return (\n    <Grid container mt={5} justify=\"center\">\n      <ResponsiveContainer width=\"100%\" height={chartHeight}>\n        <Chart data={data} layout=\"vertical\" style={{ fontSize: \"12px\" }}>\n          <XAxis type=\"number\" />\n          {renderBars()}\n          <YAxis dataKey=\"name\" reversed type=\"category\" />\n          <Legend />\n        </Chart>\n      </ResponsiveContainer>\n    </Grid>\n  );\n};\n\nexport default BarChart;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  BarChart as Chart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer\n} from \"recharts\";\n\nconst StackedBarChart = ({ data }) => {\n  return (\n    <Grid container mt={5} justify=\"center\">\n      <ResponsiveContainer width=\"100%\" height={200}>\n        <Chart data={data} layout=\"vertical\" style={{ fontSize: \"12px\" }}>\n          <XAxis type=\"number\" />\n          <YAxis dataKey=\"name\" reversed type=\"category\" />\n          <Bar dataKey=\"mark\" stackId=\"a\" name=\"Mon score\" fill=\"#b71b60\" />\n          <Bar\n            dataKey=\"rest\"\n            stackId=\"a\"\n            name=\"Autopositionnement\"\n            fill=\"#949b9f\"\n          />\n        </Chart>\n      </ResponsiveContainer>\n    </Grid>\n  );\n};\n\nexport default StackedBarChart;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { useSelector } from \"react-redux\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport SubmitButton from \"../submit-button/SubmitButton\";\nimport BarChart from \"../../results/bar-chart/BarChart\";\nimport StackedBarChart from \"../../results/stacked-bar-chart/StackedBarChart\";\n\nconst CustomRadio = withStyles({\n  root: {\n    color: \"#b71b53\",\n    \"&$checked\": {\n      color: \"#b71b53\"\n    },\n    margin: \"0 auto\"\n  },\n  checked: {}\n})(props => <Radio color=\"default\" {...props} />);\n\nconst useStyles = makeStyles(theme => ({\n  questionLine: {\n    borderBottom: \"1px solid rgba(75,75,75,0.2)\",\n    padding: \"20px 0\"\n  }\n}));\n\nlet requiredFields = [];\n\nconst validate = (formValues, props) => {\n  const errors = {};\n  props.test.questions.map(question => {\n    if (requiredFields.indexOf(question.id) === -1) {\n      requiredFields.push(question.id);\n    }\n    return requiredFields;\n  });\n\n  requiredFields.forEach(field => {\n    if (!formValues[field]) {\n      errors[field] = \"Champ requis\";\n    }\n  });\n\n  return errors;\n};\n\n/* BUTTON LINE */\nconst radioButtons = ({\n  answers,\n  salut,\n  input,\n  meta: { error, touched },\n  ...rest\n}) => (\n  <FormControl>\n    <Grid container direction=\"row\" alignItems=\"center\">\n      <RadioGroup {...input} {...rest} row>\n        {answers.map(answer => {\n          return (\n            <FormControlLabel\n              style={{\n                opacity: `${0.5 + answer.value / 15}`,\n                width: \"100px\",\n                display: \"flex\",\n                margin: \"0 auto\",\n                justifyContent: \"space-around\"\n              }}\n              key={answer.value}\n              value={answer.value.toString()}\n              control={<CustomRadio />}\n            />\n          );\n        })}\n      </RadioGroup>\n      <h4 style={{ color: \"#b71b53\", fontSize: \"12px\", margin: 0 }}>\n        {touched && error}\n      </h4>\n    </Grid>\n  </FormControl>\n);\n\n/* MAIN COMPONENT */\nconst LikertForm = ({ handleSubmit, pristine, submitting, test }) => {\n  const {\n    questions,\n    answers,\n    button,\n    wording,\n    topic,\n    type,\n    result,\n    name,\n    drivers,\n    requiredForms\n  } = test;\n\n  const [isCompleted, setCompletion] = useState(false);\n  const [size, setSize] = useState({});\n  const [data, setData] = useState([]);\n\n  // REACT-REDUX WITH HOOKS, REPLACE MAPSTATETOPROPS\n  const { results } = useSelector(state => ({\n    results: state.form[name].values\n  }));\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    // ADAPT SIZE WHETHER IT'S A LIKERT SCALE OR A TRUE/FALSE\n    const resize = () => {\n      if (type === \"likert\") {\n        setSize({ questions: 4, blank: 1, answers: 7 });\n      } else if (type === \"true-or-false\") {\n        setSize({ questions: 7, blank: 1, answers: 4 });\n      }\n    };\n    resize();\n  }, [type]);\n\n  const renderHeader = () => {\n    return (\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"flex-end\"\n        style={{\n          backgroundColor: \"#b71b53\",\n          borderRadius: \"5px\",\n          padding: \"10px\",\n          color: \"white\",\n          border: \"2px solid white\"\n        }}\n      >\n        <Grid item md={size.questions} sm={false} />\n        <Grid item md={size.blank} sm={false} />\n        <Grid\n          item\n          md={size.answers}\n          sm={12}\n          style={{ display: \"flex\", justifyContent: \"flex-end\" }}\n        >\n          <Grid container direction=\"row\" alignItems=\"center\">\n            {answers &&\n              answers.map(answer => {\n                return (\n                  <div\n                    key={answer.value}\n                    style={{\n                      width: \"100px\",\n                      fontSize: \"14px\",\n                      textAlign: \"center\",\n                      fontWeight: \"500\",\n                      whiteSpace: \"nowrap\"\n                    }}\n                  >\n                    {answer.name}\n                  </div>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  const renderQuestions = () => {\n    return (\n      questions &&\n      questions.map(question => {\n        if (!question.subTopic) {\n          return (\n            <Grid\n              key={question.id}\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justify=\"space-between\"\n              className={classes.questionLine}\n            >\n              <Grid\n                item\n                md={size.questions}\n                sm={12}\n                style={{ fontSize: \"14px\" }}\n              >\n                {question.text}\n              </Grid>\n              <Grid item md={size.blank} sm={false} />\n              <Grid item md={size.answers} sm={12}>\n                <Field\n                  name={question.id}\n                  answers={answers}\n                  component={radioButtons}\n                />\n              </Grid>\n            </Grid>\n          );\n        } else {\n          return (\n            <Grid\n              container\n              key={question.subTopic}\n              style={{\n                backgroundColor: \"#353535\",\n                borderRadius: \"8px\",\n                padding: \"16px\",\n                color: \"white\",\n                marginTop: \"40px\"\n              }}\n            >\n              <h4 style={{ margin: \"10px 0\" }}>\n                {question.subTopic.toUpperCase()}\n              </h4>\n              <Grid\n                item\n                md={7}\n                sm={12}\n                style={{\n                  textAlign: \"justify\",\n                  fontStyle: \"italic\",\n                  fontSize: \"14px\"\n                }}\n              >\n                {question.wording}\n              </Grid>\n              <Fragment>{renderHeader()}</Fragment>\n            </Grid>\n          );\n        }\n      })\n    );\n  };\n\n  const renderSubmitButton = () => {\n    return (\n      <Fragment>\n        {result ? (\n          <SubmitButton disabled={pristine || submitting}>\n            <Fragment>{button}</Fragment>\n          </SubmitButton>\n        ) : (\n          <Grid\n            item\n            md={12}\n            style={{\n              height: \"10px\",\n              backgroundColor: \"#b71b53\",\n              borderRadius: \"5px\",\n              margin: \"50px 0\",\n              opacity: \"0.5\"\n            }}\n          />\n        )}\n      </Fragment>\n    );\n  };\n\n  const renderResult = () => {\n    if (result === \"histogram\") {\n      return (\n        <Fragment>\n          {isCompleted && result && <BarChart test={test} data={data} />}\n        </Fragment>\n      );\n    } else if (result === \"stackedBarChart\") {\n      return (\n        <Fragment>\n          {isCompleted && result && <StackedBarChart test={test} data={data} />}\n        </Fragment>\n      );\n    }\n  };\n\n  // FORMAT THE DATA SO IT MATCHES WITH BARCHART FORMAT\n  const formatResults = () => {\n    let rawData = {};\n    let formatedData = [];\n    // TRUE OR FALSE CASE\n    if (type === \"true-or-false\") {\n      rawData = {\n        name: test.topic,\n        mark: 0,\n        rest: 100\n      };\n      questions.map(question => {\n        console.log(question[results[question.id]]);\n        rawData.mark += question[results[question.id]] * 10;\n        rawData.rest -= question[results[question.id]] * 10;\n        return rawData;\n      });\n      formatedData.push(rawData);\n      setData(formatedData);\n      // LIKERT - SINGLE FORM CASE\n    } else if (type === \"likert\" && !requiredForms) {\n      questions.map(question => {\n        if (!rawData[question.driver]) {\n          return (rawData[question.driver] = {\n            name: drivers[question.driver],\n            testTotal: Number(results[question.id])\n          });\n        } else {\n          return (rawData[question.driver].testTotal += Number(\n            results[question.id]\n          ));\n        }\n      });\n      formatedData = Object.values(rawData);\n      console.log(formatedData);\n      setData(formatedData);\n      // LIKERT - MULTIPLE FORM CASE\n    } else if (type === \"likert\" && requiredForms) {\n      requiredForms.map(form => {\n        return questions.map(question => {\n          if (!question.subTopic) {\n            if (!rawData[question.driver]) {\n              return (rawData[question.driver] = {\n                name: drivers[question.driver],\n                [question.form.id]:\n                  Number(results[question.id]) * Number(question.form.coef)\n              });\n            } else {\n              if (!rawData[question.driver][question.form.id]) {\n                return (rawData[question.driver][question.form.id] =\n                  Number(results[question.id]) * Number(question.form.coef));\n              } else {\n                return (rawData[question.driver][question.form.id] +=\n                  Number(results[question.id]) * Number(question.form.coef));\n              }\n            }\n          }\n          return rawData;\n        });\n      });\n\n      formatedData = Object.values(rawData);\n      console.log(formatedData);\n      setData(formatedData);\n    }\n  };\n\n  const onSubmit = async formValues => {\n    // no need e.preventdefault as handleSubmit handles it\n    await formatResults();\n    setCompletion(true);\n    return formValues;\n  };\n\n  return (\n    <Grid container style={{ marginBottom: \"30px\" }}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FormGroup>\n          <Fragment>{renderQuestions()}</Fragment>\n          <Fragment>{renderSubmitButton()}</Fragment>\n        </FormGroup>\n      </form>\n      <Fragment>{renderResult()}</Fragment>\n    </Grid>\n  );\n};\n\n// FORM NAME IS DEFINED IN FORMNAME PARENT ON EXERCISE PAGE\nexport default reduxForm({ form: \"\", enableReinitialize: true, validate })(\n  LikertForm\n);\n","import React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SubmitButton from \"../submit-button/SubmitButton\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\n\nconst CssTextField = withStyles({\n  root: {\n    marginBottom: \"10px\",\n    width: \"100%\",\n    \"& label.Mui-focused\": {\n      color: \"#b71b60\"\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"#b71b60\"\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"#b71b60\"\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"#353535\"\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"#b71b60\"\n      }\n    }\n  }\n})(TextField);\n\nlet requiredFields = [];\n\nconst validate = (formValues, props) => {\n  const errors = {};\n  props.test.questions.map(question => {\n    if (requiredFields.indexOf(question.id) === -1) {\n      requiredFields.push(question.id);\n    }\n    return requiredFields;\n  });\n\n  requiredFields.forEach(field => {\n    if (!formValues[field]) {\n      errors[field] = \"\";\n    }\n  });\n\n  return errors;\n};\n\nconst FreeField = ({ test, handleSubmit, pristine, submitting }) => {\n  const { questions, button, topic } = test;\n\n  const renderCustomInput = ({ input }) => {\n    return (\n      <Fragment>\n        <CssTextField\n          id=\"outlined-multiline-static\"\n          multiline\n          rows=\"6\"\n          variant=\"outlined\"\n          autoComplete=\"off\"\n          {...input}\n        />\n      </Fragment>\n    );\n  };\n\n  const renderInputs = () => {\n    return questions.map((question, index) => {\n      return (\n        <Grid container key={question.id}>\n          <div style={{ marginBottom: \"10px\" }}>\n            {index + 1 + \". \" + question.text}\n          </div>\n          <Field name={question.id} component={renderCustomInput} />\n          <SubmitButton disabled={pristine || submitting}>\n            <Fragment>{button}</Fragment>\n          </SubmitButton>\n        </Grid>\n      );\n    });\n  };\n\n  const onSubmit = formValues => {\n    // SEND TO API\n    let values = { name: test.name, values: formValues };\n    console.log(values);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <FormGroup>\n        {/* {topic && <h3>{topic.toUpperCase()}</h3>} */}\n        <Fragment>{renderInputs()}</Fragment>\n      </FormGroup>\n    </form>\n  );\n};\n\nexport default reduxForm({\n  form: \"\",\n  enableReinitialize: true,\n  validate\n})(FreeField);\n","import React, { Fragment } from \"react\";\n// import jsPDF from \"jspdf\";\n// import html2canvas from \"html2canvas\";\nimport LikertForm from \"../../components/forms/likert-form/LikertForm\";\nimport FreeField from \"../../components/forms/free-field/FreeField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { FormName } from \"redux-form\";\n\nconst ExercisePage = ({ skills, skill, parentIndex }) => {\n  const { topic, wording } = skills[parentIndex];\n\n  // let initialValues = {\n  //   question0: \"3\"\n  // };\n\n  const renderWording = () => {\n    return (\n      <Fragment>\n        {(topic || wording) && (\n          <Fragment>\n            {topic && <h3>{topic.toUpperCase()}</h3>}\n            {wording && (\n              <Grid\n                item\n                md={7}\n                sm={12}\n                style={{\n                  textAlign: \"justify\",\n                  fontStyle: \"italic\",\n                  marginBottom: \"30px\",\n                  fontSize: \"14px\"\n                }}\n              >\n                {wording}\n              </Grid>\n            )}\n          </Fragment>\n        )}\n      </Fragment>\n    );\n  };\n\n  const renderTestType = () => {\n    return skill.tests.map((test, index) => {\n      if (test.type === \"likert\") {\n        return (\n          <FormName key={index}>\n            {() => (\n              <LikertForm\n                test={test}\n                form={test.name}\n                // initialValues={initialValues}\n              />\n            )}\n          </FormName>\n        );\n      } else if (test.type === \"true-or-false\") {\n        return (\n          <FormName key={index}>\n            {() => (\n              <LikertForm\n                test={test}\n                form={test.name}\n                // initialValues={initialValues}\n              />\n            )}\n          </FormName>\n        );\n      } else if (test.type === \"free-field\") {\n        return (\n          <FormName key={index}>\n            {() => (\n              <FreeField\n                test={test}\n                form={test.name}\n                // initialValues={initialValues}\n              />\n            )}\n          </FormName>\n        );\n      }\n      return null;\n    });\n  };\n\n  // const printPdf = () => {\n  //   const input = document.getElementById(\"to-print\");\n\n  //   html2canvas(input).then(canvas => {\n  //     const imgData = canvas.toDataURL(\"image/png\");\n  //     const pdf = new jsPDF(\"p\", \"pt\", \"a4\", true);\n\n  //     pdf.addImage(imgData, \"PNG\", 0, 0, 270, 270);\n  //     pdf.save(`${skill.name}.pdf`);\n  //   });\n  // };\n\n  return (\n    <Fragment>\n      <div id=\"to-print\">\n        <Grid>\n          <Fragment>{renderWording()}</Fragment>\n          <Fragment>{renderTestType()}</Fragment>\n        </Grid>\n      </div>\n      {/* <button onClick={() => printPdf()}>Print</button> */}\n    </Fragment>\n  );\n};\n\nexport default ExercisePage;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TabPanel from \"../../components/tab-panel/TabPanel\";\nimport Paper from \"@material-ui/core/Grid\";\nimport ExercisePage from \"../../components/exercise-page/ExercisePage\";\n\nconst a11yProps = index => {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    \"aria-controls\": `scrollable-auto-tabpanel-${index}`\n  };\n};\n\nconst language = \"fr\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    // flexGrow: 1,\n    width: \"100%\",\n    backgroundColor: \"white\"\n  },\n  tab: {\n    \"&:last-child\": {\n      color: \"#b71b53\"\n    }\n  },\n  paper: { margin: \"0\", width: \"100%\", overflowX: \"auto\", padding: \"20px 0\" }\n}));\n\n/* MAIN COMPONENT */\nconst ProfilerApp = () => {\n  const { skills } = window.props[language];\n  const classes = useStyles();\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const renderTabs = () => {\n    return (\n      <AppBar position=\"fixed\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n          TabIndicatorProps={{\n            style: {\n              backgroundColor: \"#b71b53\"\n            }\n          }}\n        >\n          {skills.map((skill, index) => {\n            return (\n              <Tab\n                key={index}\n                label={skill.name}\n                {...a11yProps(index)}\n                className={classes.tab}\n              />\n            );\n          })}\n        </Tabs>\n      </AppBar>\n    );\n  };\n\n  const renderPanel = () => {\n    return skills.map((skill, index) => {\n      return (\n        <TabPanel value={value} index={index} key={index}>\n          <Grid style={{ paddingTop: \"40px\" }}>\n            <Paper className={classes.paper}>\n              <ExercisePage skill={skill} skills={skills} parentIndex={index} />\n            </Paper>\n          </Grid>\n        </TabPanel>\n      );\n    });\n  };\n\n  return (\n    <Grid container className={classes.root} justify=\"center\">\n      <Grid item>{renderTabs()}</Grid>\n      <Grid item lg={8} md={12} sm={12} xs={12}>\n        {renderPanel()}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ProfilerApp;\n","import React from \"react\";\nimport ProfilerApp from \"./container/profiler-app/ProfilerApp\";\n\nconst App = () => {\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        width: \"100vw\"\n      }}\n    >\n      <ProfilerApp />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nexport default combineReducers({\n  form: formReducer\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport reducers from \"./reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}