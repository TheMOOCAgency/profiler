{"version":3,"sources":["components/tab-panel/TabPanel.js","components/forms/submit-button/SubmitButton.js","components/results/bar-chart/BarChart.js","components/forms/likert-form/LikertForm.js","components/forms/radio-button/RadioButton.js","components/forms/true-or-false/TrueOrFalse.js","components/forms/free-field/FreeField.js","container/profiler-app/ProfilerApp.js","App.js","reducers/index.js","index.js"],"names":["TabPanel","props","children","value","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","useStyles","makeStyles","theme","root","margin","backgroundColor","width","color","border","SubmitButton","classes","Button","variant","className","type","connect","state","results","form","likert","values","test","questions","drivers","useState","data","setData","useEffect","rawData","formatedData","map","question","driver","testTotal","Number","name","selfTotal","othersTotal","Object","Grid","container","mt","justify","height","layout","style","fontSize","dataKey","reversed","fill","CustomRadio","withStyles","checked","Radio","questionLine","borderBottom","padding","radioButtons","answers","input","salut","rest","FormControl","RadioGroup","row","answer","FormControlLabel","opacity","display","justifyContent","key","toString","control","reduxForm","validate","errors","forEach","field","handleSubmit","pristine","submitting","topic","wording","button","isCompleted","setCompletion","textAlign","marginBottom","fontStyle","onSubmit","formValues","FormGroup","direction","item","md","alignItems","text","Field","disabled","RadioButton","selectedValue","handleSelect","onChange","Math","random","inputProps","overflowX","TrueOrFalse","questionIndex","setSelectedValue","event","console","log","target","Paper","mx","Table","TableBody","TableRow","TableCell","fontWeight","marginLeft","CssTextField","borderBottomColor","borderColor","TextField","FreeField","React","setValue","multiline","rows","defaultValue","paper","ProfilerApp","skills","window","handleChange","newValue","AppBar","position","Tabs","scrollButtons","aria-label","TabIndicatorProps","skill","Tab","label","a11yProps","lg","sm","xs","paddingTop","tests","renderTestType","App","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"8TA4BeA,EAvBE,SAAAC,GAAU,IACjBC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,EADX,YACqBJ,EADrB,8BAGxB,OACE,kBAACK,EAAA,EAAD,eACEC,UAAU,MACVC,KAAK,WACLC,OAAQN,IAAUC,EAClBM,GAAE,mCAA8BN,GAChCO,kBAAA,8BAAwCP,IACpCC,GAEJ,kBAACO,EAAA,EAAD,CAAKC,EAAG,GAAIX,K,+ECbZY,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,OAAQ,SACRC,gBAAiB,UACjBC,MAAO,OACPC,MAAO,QACPC,OAAQ,OACR,UAAW,CACTH,gBAAiB,gBAcRI,EATM,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAChBsB,EAAUV,IAChB,OACE,kBAACW,EAAA,EAAD,CAAQC,QAAQ,WAAWC,UAAWH,EAAQP,KAAMW,KAAK,UACtD1B,I,QC8CQ2B,eAJS,SAAAC,GACtB,MAAO,CAAEC,QAASD,EAAME,KAAKC,OAAOC,UAGvBL,EAtDE,SAAC,GAAuB,IAArBE,EAAoB,EAApBA,QAASI,EAAW,EAAXA,KACnBC,EAAuBD,EAAvBC,UAAWC,EAAYF,EAAZE,QADmB,EAEdC,mBAAS,IAFK,mBAE/BC,EAF+B,KAEzBC,EAFyB,KA8BtC,OAzBAC,qBAAU,WACR,IAAIC,EAAU,GACVC,EAAe,GAEjBZ,GACEK,EAAUQ,KAAI,SAAAC,GACZ,OAAKH,EAAQG,EAASC,QAQZJ,EAAQG,EAASC,QAAQC,WAAaC,OAC5CjB,EAAQc,EAASnC,KARXgC,EAAQG,EAASC,QAAU,CACjCG,KAAMZ,EAAQQ,EAASC,QACvBC,UAAWC,OAAOjB,EAAQc,EAASnC,KACnCwC,UAAW,GACXC,YAAa,OAQrBR,EAAeS,OAAOlB,OAAOQ,GAC7BF,EAAQG,KAGT,CAACZ,EAASM,EAASD,IAGpB,kBAACiB,EAAA,EAAD,CAAMC,WAAS,EAACC,GAAI,EAAGC,QAAQ,UAC7B,kBAAC,IAAD,CAAqBpC,MAAM,OAAOqC,OAAQ,KACxC,kBAAC,IAAD,CAAOlB,KAAMA,EAAMmB,OAAO,WAAWC,MAAO,CAAEC,SAAU,SACtD,kBAAC,IAAD,CAAOhC,KAAK,WACZ,kBAAC,IAAD,CAAOiC,QAAQ,OAAOC,UAAQ,EAAClC,KAAK,aACpC,kBAAC,IAAD,CAAKiC,QAAQ,YAAYZ,KAAK,cAAcc,KAAK,YACjD,kBAAC,IAAD,CAAKF,QAAQ,YAAYZ,KAAK,qBAAqBc,KAAK,YACxD,kBAAC,IAAD,CACEF,QAAQ,cACRZ,KAAK,2BACLc,KAAK,YAEP,kBAAC,IAAD,YC5CJC,EAAcC,YAAW,CAC7BhD,KAAM,CACJI,MAAO,UACP,YAAa,CACXA,MAAO,WAETH,OAAQ,UAEVgD,QAAS,IARSD,EASjB,SAAAhE,GAAK,OAAI,kBAACkE,EAAA,EAAD,eAAO9C,MAAM,WAAcpB,OAEjCa,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCoD,aAAc,CACZC,aAAc,+BACdC,QAAS,cAgBPC,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAgBC,GAAnB,EAAYC,MAAZ,EAAmBD,OAAUE,EAA7B,kDACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,iBAAgBJ,EAAWE,EAA3B,CAAiCG,KAAG,IACjCN,EAAQ5B,KAAI,SAAAmC,GACX,OACE,kBAACC,EAAA,EAAD,CACErB,MAAO,CACLsB,QAAQ,GAAD,OAAK,GAAMF,EAAO5E,MAAQ,IACjCiB,MAAO,QACP8D,QAAS,OACThE,OAAQ,SACRiE,eAAgB,gBAElBC,IAAKL,EAAO5E,MACZA,MAAO4E,EAAO5E,MAAMkF,WACpBC,QAAS,kBAACtB,EAAD,cAgHNuB,cAAU,CACvBvD,KAAM,SACNwD,SA9Ie,SAAAtD,GACf,IAAMuD,EAAS,GAQf,MAPuB,GACRC,SAAQ,SAAAC,GAChBzD,EAAOyD,KACVF,EAAOE,GAAS,eAIbF,IAmIMF,EAvGI,SAAC,GAAkD,IAAhDK,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,WAAY3D,EAAW,EAAXA,KAChDC,EAA+CD,EAA/CC,UAAWoC,EAAoCrC,EAApCqC,QAASuB,EAA2B5D,EAA3B4D,MAAOC,EAAoB7D,EAApB6D,QAASC,EAAW9D,EAAX8D,OADuB,EAG9B3D,oBAAS,GAHqB,mBAG5D4D,EAH4D,KAG/CC,EAH+C,KAK7D3E,EAAUV,IAoEhB,OAAIoF,EACK,kBAAC,EAAD,CAAU/D,KAAMA,IAGvB,kBAAC,WAAD,KACE,4BAAK4D,GACL,uBACEpC,MAAO,CACLvC,MAAO,MACPgF,UAAW,UACXC,aAAc,OACdC,UAAW,SACX1C,SAAU,SAGXoC,GAEH,0BAAMO,SAAUX,GAvBH,SAAAY,GAGf,OADAL,GAAc,GACPK,MAqBH,kBAACC,EAAA,EAAD,KACE,kBAAC,WAAD,KAnFJ,kBAACpD,EAAA,EAAD,CAAMC,WAAS,EAACoD,UAAU,MAAMlD,QAAQ,YACtC,kBAACH,EAAA,EAAD,CAAMsD,MAAI,EAACC,GAAI,IACf,kBAACvD,EAAA,EAAD,CAAMsD,MAAI,EAACC,GAAI,IACf,kBAACvD,EAAA,EAAD,CACEsD,MAAI,EACJC,GAAI,EACJjD,MAAO,CAAEuB,QAAS,OAAQC,eAAgB,aAE1C,kBAAC9B,EAAA,EAAD,CAAMC,WAAS,EAACoD,UAAU,OACvBlC,GACCA,EAAQ5B,KAAI,SAAAmC,GACV,OACE,yBACEK,IAAKL,EAAO5E,MACZwD,MAAO,CACLvC,MAAO,QACPwC,SAAU,OACVwC,UAAW,WAGZrB,EAAO9B,aAgElB,kBAAC,WAAD,KApDJb,GACAA,EAAUQ,KAAI,SAAAC,GAAQ,OACpB,kBAACQ,EAAA,EAAD,CACE+B,IAAKvC,EAASnC,GACd4C,WAAS,EACToD,UAAU,MACVG,WAAW,SACXrD,QAAQ,gBACR7B,UAAWH,EAAQ4C,cAEnB,kBAACf,EAAA,EAAD,CAAMsD,MAAI,EAACC,GAAI,EAAGjD,MAAO,CAAEC,SAAU,SAClCf,EAASiE,MAEZ,kBAACzD,EAAA,EAAD,CAAMsD,MAAI,EAACC,GAAI,IACf,kBAACvD,EAAA,EAAD,CAAMsD,MAAI,EAACC,GAAI,GACb,kBAACG,EAAA,EAAD,CACE9D,KAAMJ,EAASnC,GACf8D,QAASA,EACTjE,UAAWgE,UAmCf,kBAAC,EAAD,CAAcyC,SAAUnB,GAAYC,GAClC,kBAAC,WAAD,KAAWG,U,kBC7JjBjC,EAAcC,YAAW,CAC7BhD,KAAM,CACJI,MAAO,UACP,YAAa,CACXA,MAAO,YAGX6C,QAAS,IAPSD,EAQjB,SAAAhE,GAAK,OAAI,kBAACkE,EAAA,EAAD,eAAO9C,MAAM,WAAcpB,OAgBxBgH,EAdK,SAAC,GAA4C,IAA1C9G,EAAyC,EAAzCA,MAAO+G,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAC3C,OACE,yBAAKxD,MAAO,CAAEsB,QAAQ,GAAD,OAAK,GAAM9E,EAAQ,MACtC,kBAAC,EAAD,CACE+D,QAASgD,IAAkB/G,EAC3BiH,SAAUD,EACVhH,MAAOA,EACP8C,KAAI,2BAAsC,IAAhBoE,KAAKC,UAC/BC,WAAY,CAAE,aAAcpH,O,2BCd9BW,EAAYC,YAAW,CAC3BE,KAAM,CACJC,OAAQ,SACRE,MAAO,OACPoG,UAAW,OACXlD,QAAS,UA2FEmD,EAvFK,SAAC,GAA6B,IAA3BtF,EAA0B,EAA1BA,KACbC,GADuC,EAApBsF,cACoBvF,EAAvCC,WAAWoC,EAA4BrC,EAA5BqC,QAASuB,EAAmB5D,EAAnB4D,MAAOC,EAAY7D,EAAZ6D,QAC7BxE,EAAUV,IAF+B,EAILwB,oBAAS,GAJJ,mBAIxC4E,EAJwC,KAIzBS,EAJyB,KAMzCR,EAAe,SAAAS,GACnBC,QAAQC,IAAIF,EAAMG,OAAO5H,MAAO+G,GACL,UAAvBU,EAAMG,OAAO5H,MACfwH,GAAiB,GAEjBA,GAAiB,IAwDrB,OACE,kBAACK,EAAA,EAAD,CAAOnH,EAAG,EAAG0C,GAAI,EAAG0E,GAAG,OAAOtG,UAAWH,EAAQP,MAC/C,4BAAK8E,GACL,uBACEpC,MAAO,CACLvC,MAAO,MACPgF,UAAW,UACXC,aAAc,OACdC,UAAW,SACX1C,SAAU,SAGXoC,GAEH,kBAACkC,EAAA,EAAD,KArCA,kBAACC,EAAA,EAAD,KACG/F,GACCA,EAAUQ,KAAI,SAACC,EAAUzC,GACvB,OACE,kBAACgI,EAAA,EAAD,CAAUhD,IAAKvC,EAASnC,GAAIiD,MAAO,CAAEzC,OAAQ,WAC3C,kBAACmH,EAAA,EAAD,CACE1E,MAAO,CACLC,SAAU,OACV0E,WAAY,IACZlH,MAAO,MACPgF,UAAW,YAGZhG,EAAQ,EAAI,KAAOyC,EAASiE,MAE/B,kBAACuB,EAAA,EAAD,KA1CV,yBAAK1E,MAAO,CAAE4E,WAAY,OAAQrD,QAAS,SACxCV,EAAQ5B,KAAI,SAACmC,EAAQ3E,GACpB,OACE,yBACEgF,IAAKhF,EACLA,MAAOA,EACPuD,MAAO,CACLuB,QAAS,OACT2B,WAAY,SACZzF,MAAO,UAGT,kBAAC,EAAD,CACEjB,MAAO4E,EAAO5E,MACd+G,cAAeA,EACfC,aAAcA,IAEhB,6BAAMpC,EAAO+B,oB,SC9CrB0B,EAAevE,YAAW,CAC9BhD,KAAM,CACJG,MAAO,OACP,sBAAuB,CACrBC,MAAO,WAET,8BAA+B,CAC7BoH,kBAAmB,WAErB,2BAA4B,CAC1B,aAAc,CACZC,YAAa,WAEf,mBAAoB,CAClBA,YAAa,WAEf,yBAA0B,CACxBA,YAAa,cAjBAzE,CAqBlB0E,KA2BYC,EAzBG,SAAC,GAAiC,IAA/BlB,EAA8B,EAA9BA,cAAe7E,EAAe,EAAfA,SAAe,EACvBgG,IAAMvG,SAAS,IADQ,mBAC1CnC,EAD0C,KACnC2I,EADmC,KAQjD,OACE,kBAACzF,EAAA,EAAD,CAAMC,WAAS,GACb,yBAAKK,MAAO,CAAE0C,aAAc,SACzBqB,EAAgB,MAAQ7E,GAAYA,EAASiE,OAEhD,kBAAC0B,EAAD,CACE9H,GAAG,4BACHqI,WAAS,EACTC,KAAK,IACLC,aAAc9I,EACdiH,SAfe,SAAAQ,GACnBC,QAAQC,IAAI3H,GACZ2I,EAASlB,EAAMG,OAAO5H,QAclBuB,QAAQ,eC1BVZ,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CAEJG,MAAO,OACPD,gBAAiB,SAEnB+H,MAAO,CAAEhI,OAAQ,IAAKE,MAAO,OAAQoG,UAAW,OAAQlD,QAAS,cAoFpD6E,EAhFK,WAAO,IACjBC,EAAWC,OAAOpJ,MAAP,GAAXmJ,OACF5H,EAAUV,IAFQ,EAGEwB,mBAAS,GAHX,mBAGjBnC,EAHiB,KAGV2I,EAHU,KAKlBQ,EAAe,SAAC1B,EAAO2B,GAC3BT,EAASS,IAgEX,OACE,kBAAClG,EAAA,EAAD,CAAMC,WAAS,EAAC3B,UAAWH,EAAQP,KAAMuC,QAAQ,UA5D/C,kBAACgG,EAAA,EAAD,CAAQC,SAAS,QAAQpI,MAAM,WAC7B,kBAACqI,EAAA,EAAD,CACEvJ,MAAOA,EACPiH,SAAUkC,EACV5H,QAAQ,aACRiI,cAAc,OACdC,aAAW,+BACXC,kBAAmB,CACjBlG,MAAO,CACLxC,gBAAiB,aAIpBiI,EAAOxG,KAAI,SAACkH,EAAO1J,GAClB,OAAO,kBAAC2J,EAAA,EAAD,eAAK3E,IAAKhF,EAAO4J,MAAOF,EAAM7G,MA5C/B,SAAA7C,GAChB,MAAO,CACLM,GAAG,uBAAD,OAAyBN,GAC3B,gBAAgB,4BAAhB,OAA6CA,IAyCU6J,CAAU7J,UAgD/D,kBAACiD,EAAA,EAAD,CAAMsD,MAAI,EAACuD,GAAI,EAAGtD,GAAI,GAAIuD,GAAI,GAAIC,GAAI,IApBjChB,EAAOxG,KAAI,SAACkH,EAAO1J,GACxB,OACE,kBAAC,EAAD,CAAUD,MAAOA,EAAOC,MAAOA,EAAOgF,IAAKhF,GACzC,kBAACiD,EAAA,EAAD,CACEC,WAAS,EACToD,UAAU,SACVG,WAAW,SACXrD,QAAQ,SACRG,MAAO,CAAE0G,WAAY,SA7BR,SAAAjK,GAAK,OAC1BgJ,EAAOhJ,GAAOkK,MAAM1H,KAAI,SAACT,EAAM/B,GAC7B,MAAkB,WAAd+B,EAAKP,KAEL,kBAAC,IAAD,CAAOD,UAAWH,EAAQ0H,MAAO9D,IAAKhF,GACpC,kBAAC,EAAD,CAAY+B,KAAMA,KAGC,kBAAdA,EAAKP,KACP,kBAAC,EAAD,CAAawD,IAAKhF,EAAO+B,KAAMA,IACf,eAAdA,EAAKP,KAEZ,kBAAC,IAAD,CAAOD,UAAWH,EAAQ0H,MAAO9D,IAAKhF,GACpC,kBAAC,EAAD,CAAWsH,cAAetH,EAAQ,EAAGyC,SAAUV,EAAKU,YAInD,QAcA0H,CAAenK,WC5EboK,EAfH,WACV,OACE,yBACE7I,UAAU,MACVgC,MAAO,CACLuB,QAAS,OACTC,eAAgB,SAChB/D,MAAO,UAGT,kBAAC,EAAD,Q,SCXSqJ,cAAgB,CAC7BzI,KAAM0I,MCOFC,GAAmBtB,OAAOuB,sCAAwCC,IAClEC,GAAQC,YACZC,EACAL,GAAiBM,YAAgBC,OAGnCC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,IACf,kBAAC,EAAD,OAEFO,SAASC,cAAc,Y","file":"static/js/main.2052b81e.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\n\nconst TabPanel = props => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n};\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nexport default TabPanel;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: \"30px 0\",\n    backgroundColor: \"#353535\",\n    width: \"100%\",\n    color: \"white\",\n    border: \"none\",\n    \"&:hover\": {\n      backgroundColor: \"#b71b53\"\n    }\n  }\n}));\n\nconst SubmitButton = ({ children }) => {\n  const classes = useStyles();\n  return (\n    <Button variant=\"outlined\" className={classes.root} type=\"submit\">\n      {children}\n    </Button>\n  );\n};\n\nexport default SubmitButton;\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport {\n  BarChart as Chart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Legend\n} from \"recharts\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst BarChart = ({ results, test }) => {\n  const { questions, drivers } = test;\n  const [data, setData] = useState([]);\n\n  // FORMAT THE DATA SO IT MATCHES WITH BARCHART FORMAT\n  useEffect(() => {\n    let rawData = {};\n    let formatedData = [];\n    const formatResults = () => {\n      results &&\n        questions.map(question => {\n          if (!rawData[question.driver]) {\n            return (rawData[question.driver] = {\n              name: drivers[question.driver],\n              testTotal: Number(results[question.id]),\n              selfTotal: 15,\n              othersTotal: 18\n            });\n          } else {\n            return (rawData[question.driver].testTotal += Number(\n              results[question.id]\n            ));\n          }\n        });\n      formatedData = Object.values(rawData);\n      setData(formatedData);\n    };\n    formatResults();\n  }, [results, drivers, questions]);\n\n  return (\n    <Grid container mt={5} justify=\"center\">\n      <ResponsiveContainer width=\"100%\" height={500}>\n        <Chart data={data} layout=\"vertical\" style={{ fontSize: \"12px\" }}>\n          <XAxis type=\"number\" />\n          <YAxis dataKey=\"name\" reversed type=\"category\" />\n          <Bar dataKey=\"testTotal\" name=\"Test driver\" fill=\"#353535\" />\n          <Bar dataKey=\"selfTotal\" name=\"Autopositionnement\" fill=\"#b71b60\" />\n          <Bar\n            dataKey=\"othersTotal\"\n            name=\"Evaluation par les pairs\"\n            fill=\"#949b9f\"\n          />\n          <Legend />\n        </Chart>\n      </ResponsiveContainer>\n    </Grid>\n  );\n};\n\nconst mapStateToProps = state => {\n  return { results: state.form.likert.values };\n};\n\nexport default connect(mapStateToProps)(BarChart);\n","import React, { Fragment, useState } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport SubmitButton from \"../submit-button/SubmitButton\";\nimport BarChart from \"../../results/bar-chart/BarChart\";\n\nconst CustomRadio = withStyles({\n  root: {\n    color: \"#b71b53\",\n    \"&$checked\": {\n      color: \"#b71b53\"\n    },\n    margin: \"0 auto\"\n  },\n  checked: {}\n})(props => <Radio color=\"default\" {...props} />);\n\nconst useStyles = makeStyles(theme => ({\n  questionLine: {\n    borderBottom: \"1px solid rgba(75,75,75,0.2)\",\n    padding: \"20px 0\"\n  }\n}));\nconst validate = values => {\n  const errors = {};\n  const requiredFields = [];\n  requiredFields.forEach(field => {\n    if (!values[field]) {\n      errors[field] = \"Required\";\n    }\n  });\n\n  return errors;\n};\n\n/* BUTTON LINE */\nconst radioButtons = ({ answers, salut, input, ...rest }) => (\n  <FormControl>\n    <RadioGroup {...input} {...rest} row>\n      {answers.map(answer => {\n        return (\n          <FormControlLabel\n            style={{\n              opacity: `${0.5 + answer.value / 15}`,\n              width: \"100px\",\n              display: \"flex\",\n              margin: \"0 auto\",\n              justifyContent: \"space-around\"\n            }}\n            key={answer.value}\n            value={answer.value.toString()}\n            control={<CustomRadio />}\n          />\n        );\n      })}\n    </RadioGroup>\n  </FormControl>\n);\n\n/* MAIN COMPONENT */\nconst LikertForm = ({ handleSubmit, pristine, submitting, test }) => {\n  const { questions, answers, topic, wording, button } = test;\n\n  const [isCompleted, setCompletion] = useState(false);\n\n  const classes = useStyles();\n\n  const renderHeader = () => {\n    return (\n      <Grid container direction=\"row\" justify=\"flex-end\">\n        <Grid item md={4} />\n        <Grid item md={1} />\n        <Grid\n          item\n          md={7}\n          style={{ display: \"flex\", justifyContent: \"flex-end\" }}\n        >\n          <Grid container direction=\"row\">\n            {answers &&\n              answers.map(answer => {\n                return (\n                  <div\n                    key={answer.value}\n                    style={{\n                      width: \"100px\",\n                      fontSize: \"14px\",\n                      textAlign: \"center\"\n                    }}\n                  >\n                    {answer.name}\n                  </div>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  const renderQuestions = () => {\n    return (\n      questions &&\n      questions.map(question => (\n        <Grid\n          key={question.id}\n          container\n          direction=\"row\"\n          alignItems=\"center\"\n          justify=\"space-between\"\n          className={classes.questionLine}\n        >\n          <Grid item md={4} style={{ fontSize: \"14px\" }}>\n            {question.text}\n          </Grid>\n          <Grid item md={1} />\n          <Grid item md={7}>\n            <Field\n              name={question.id}\n              answers={answers}\n              component={radioButtons}\n            />\n          </Grid>\n        </Grid>\n      ))\n    );\n  };\n\n  const onSubmit = formValues => {\n    // no need e.preventdefault as handleSubmit handles it\n    setCompletion(true);\n    return formValues;\n  };\n\n  if (isCompleted) {\n    return <BarChart test={test} />;\n  }\n  return (\n    <Fragment>\n      <h3>{topic}</h3>\n      <p\n        style={{\n          width: \"60%\",\n          textAlign: \"justify\",\n          marginBottom: \"30px\",\n          fontStyle: \"italic\",\n          fontSize: \"14px\"\n        }}\n      >\n        {wording}\n      </p>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FormGroup>\n          <Fragment>{renderHeader()}</Fragment>\n          <Fragment>{renderQuestions()}</Fragment>\n          <SubmitButton disabled={pristine || submitting}>\n            <Fragment>{button}</Fragment>\n          </SubmitButton>\n        </FormGroup>\n      </form>\n    </Fragment>\n  );\n};\n\nexport default reduxForm({\n  form: \"likert\",\n  validate\n})(LikertForm);\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Radio from \"@material-ui/core/Radio\";\n\nconst CustomRadio = withStyles({\n  root: {\n    color: \"#b71b53\",\n    \"&$checked\": {\n      color: \"#b71b53\"\n    }\n  },\n  checked: {}\n})(props => <Radio color=\"default\" {...props} />);\n\nconst RadioButton = ({ value, selectedValue, handleSelect }) => {\n  return (\n    <div style={{ opacity: `${0.5 + value / 15}` }}>\n      <CustomRadio\n        checked={selectedValue === value}\n        onChange={handleSelect}\n        value={value}\n        name={`radio-button-demo${Math.random() * 100}`}\n        inputProps={{ \"aria-label\": value }}\n      />\n    </div>\n  );\n};\n\nexport default RadioButton;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport RadioButton from \"../radio-button/RadioButton\";\n// import SubmitButton from \"../submit-button/SubmitButton\";\nimport { TableRow, TableCell, Table } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    margin: \"20px 0\",\n    width: \"100%\",\n    overflowX: \"auto\",\n    padding: \"20px\"\n  }\n});\n\nconst TrueOrFalse = ({ test, questionIndex }) => {\n  const { questions, answers, topic, wording } = test;\n  const classes = useStyles();\n\n  const [selectedValue, setSelectedValue] = useState(true);\n\n  const handleSelect = event => {\n    console.log(event.target.value, selectedValue);\n    if (event.target.value === \"false\") {\n      setSelectedValue(false);\n    } else {\n      setSelectedValue(true);\n    }\n  };\n\n  const renderButtons = () => {\n    return (\n      <div style={{ marginLeft: \"30px\", display: \"flex\" }}>\n        {answers.map((answer, index) => {\n          return (\n            <div\n              key={index}\n              index={index}\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                width: \"100px\"\n              }}\n            >\n              <RadioButton\n                value={answer.value}\n                selectedValue={selectedValue}\n                handleSelect={handleSelect}\n              />\n              <div>{answer.text}</div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderQuestions = () => {\n    return (\n      <TableBody>\n        {questions &&\n          questions.map((question, index) => {\n            return (\n              <TableRow key={question.id} style={{ margin: \"20px 0\" }}>\n                <TableCell\n                  style={{\n                    fontSize: \"14px\",\n                    fontWeight: 400,\n                    width: \"60%\",\n                    textAlign: \"justify\"\n                  }}\n                >\n                  {index + 1 + \". \" + question.text}\n                </TableCell>\n                <TableCell>{renderButtons()}</TableCell>\n              </TableRow>\n            );\n          })}\n      </TableBody>\n    );\n  };\n\n  return (\n    <Paper p={5} mt={5} mx=\"auto\" className={classes.root}>\n      <h3>{topic}</h3>\n      <p\n        style={{\n          width: \"60%\",\n          textAlign: \"justify\",\n          marginBottom: \"30px\",\n          fontStyle: \"italic\",\n          fontSize: \"14px\"\n        }}\n      >\n        {wording}\n      </p>\n      <Table>{renderQuestions()}</Table>\n      {/* <SubmitButton>\"TEMPORAIRE\"</SubmitButton> */}\n    </Paper>\n  );\n};\n\nexport default TrueOrFalse;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst CssTextField = withStyles({\n  root: {\n    width: \"100%\",\n    \"& label.Mui-focused\": {\n      color: \"#b71b60\"\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"#b71b60\"\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"#b71b60\"\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"#353535\"\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"#b71b60\"\n      }\n    }\n  }\n})(TextField);\n\nconst FreeField = ({ questionIndex, question }) => {\n  const [value, setValue] = React.useState(\"\");\n\n  const handleChange = event => {\n    console.log(value);\n    setValue(event.target.value);\n  };\n\n  return (\n    <Grid container>\n      <div style={{ marginBottom: \"10px\" }}>\n        {questionIndex + \". \" + (question && question.text)}\n      </div>\n      <CssTextField\n        id=\"outlined-multiline-static\"\n        multiline\n        rows=\"6\"\n        defaultValue={value}\n        onChange={handleChange}\n        variant=\"outlined\"\n      />\n    </Grid>\n  );\n};\n\nexport default FreeField;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TabPanel from \"../../components/tab-panel/TabPanel\";\nimport Paper from \"@material-ui/core/Grid\";\nimport LikertForm from \"../../components/forms/likert-form/LikertForm\";\nimport TrueOrFalse from \"../../components/forms/true-or-false/TrueOrFalse\";\nimport FreeField from \"../../components/forms/free-field/FreeField\";\n\nconst a11yProps = index => {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    \"aria-controls\": `scrollable-auto-tabpanel-${index}`\n  };\n};\n\nconst language = \"fr\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    // flexGrow: 1,\n    width: \"100%\",\n    backgroundColor: \"white\"\n  },\n  paper: { margin: \"0\", width: \"100%\", overflowX: \"auto\", padding: \"20px 0\" }\n}));\n\n/* MAIN COMPONENT */\nconst ProfilerApp = () => {\n  const { skills } = window.props[language];\n  const classes = useStyles();\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const renderTabs = () => {\n    return (\n      <AppBar position=\"fixed\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n          TabIndicatorProps={{\n            style: {\n              backgroundColor: \"#b71b53\"\n            }\n          }}\n        >\n          {skills.map((skill, index) => {\n            return <Tab key={index} label={skill.name} {...a11yProps(index)} />;\n          })}\n        </Tabs>\n      </AppBar>\n    );\n  };\n\n  const renderTestType = index =>\n    skills[index].tests.map((test, index) => {\n      if (test.type === \"likert\") {\n        return (\n          <Paper className={classes.paper} key={index}>\n            <LikertForm test={test} />\n          </Paper>\n        );\n      } else if (test.type === \"true-or-false\") {\n        return <TrueOrFalse key={index} test={test} />;\n      } else if (test.type === \"free-field\") {\n        return (\n          <Paper className={classes.paper} key={index}>\n            <FreeField questionIndex={index + 1} question={test.question} />\n          </Paper>\n        );\n      }\n      return null;\n    });\n\n  const renderPanel = () => {\n    return skills.map((skill, index) => {\n      return (\n        <TabPanel value={value} index={index} key={index}>\n          <Grid\n            container\n            direction=\"column\"\n            alignItems=\"center\"\n            justify=\"center\"\n            style={{ paddingTop: \"40px\" }}\n          >\n            {renderTestType(index)}\n          </Grid>\n        </TabPanel>\n      );\n    });\n  };\n\n  return (\n    <Grid container className={classes.root} justify=\"center\">\n      {renderTabs()}\n      <Grid item lg={8} md={12} sm={12} xs={12}>\n        {renderPanel()}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ProfilerApp;\n","import React from \"react\";\nimport ProfilerApp from \"./container/profiler-app/ProfilerApp\";\n\nconst App = () => {\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        width: \"100vw\"\n      }}\n    >\n      <ProfilerApp />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nexport default combineReducers({\n  form: formReducer\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport reducers from \"./reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}