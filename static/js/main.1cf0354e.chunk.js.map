{"version":3,"sources":["components/tab-panel/TabPanel.jsx","components/forms/submit-button/SubmitButton.jsx","components/results/bar-chart/BarChart.jsx","components/results/stacked-bar-chart/StackedBarChart.jsx","components/forms/likert-form/LikertForm.jsx","components/forms/free-field/FreeField.jsx","components/exercise-page/ExercisePage.jsx","container/profiler-app/ProfilerApp.jsx","App.jsx","reducers/index.js","index.js"],"names":["TabPanel","props","children","value","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","useStyles","makeStyles","theme","root","margin","backgroundColor","width","color","border","SubmitButton","classes","Button","variant","className","type","BarChart","data","Grid","container","mt","justify","height","layout","style","fontSize","dataKey","reversed","name","fill","StackedBarChart","stackId","CustomRadio","withStyles","checked","Radio","questionLine","borderBottom","padding","requiredFields","radioButtons","answers","input","salut","rest","FormControl","RadioGroup","row","map","answer","FormControlLabel","opacity","display","justifyContent","key","toString","control","reduxForm","form","enableReinitialize","validate","values","errors","test","questions","question","indexOf","push","forEach","field","handleSubmit","pristine","submitting","button","wording","topic","result","drivers","useState","isCompleted","setCompletion","size","setSize","setData","results","useSelector","state","useEffect","blank","formatResults","rawData","formatedData","mark","console","log","driver","testTotal","Number","selfTotal","othersTotal","Object","onSubmit","formValues","a","toUpperCase","item","md","sm","textAlign","marginBottom","fontStyle","FormGroup","direction","alignItems","text","Field","disabled","borderRadius","CssTextField","borderBottomColor","borderColor","TextField","renderCustomInput","formProps","multiline","rows","autoComplete","ExercisePage","skills","skill","parentIndex","initialValues","question0","question1","tests","FormName","tab","paper","overflowX","ProfilerApp","window","setValue","handleChange","event","newValue","AppBar","position","Tabs","onChange","scrollButtons","aria-label","TabIndicatorProps","Tab","label","a11yProps","lg","xs","paddingTop","App","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.1cf0354e.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\n\nconst TabPanel = props => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n};\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nexport default TabPanel;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: \"10px 0 50px 0\",\n    backgroundColor: \"#353535\",\n    width: \"300px\",\n    color: \"white\",\n    border: \"none\",\n    \"&:hover\": {\n      backgroundColor: \"#b71b53\"\n    }\n  }\n}));\n\nconst SubmitButton = ({ children }) => {\n  const classes = useStyles();\n  return (\n    <Button variant=\"outlined\" className={classes.root} type=\"submit\">\n      {children}\n    </Button>\n  );\n};\n\nexport default SubmitButton;\n","import React from \"react\";\n\nimport {\n  BarChart as Chart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Legend\n} from \"recharts\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst BarChart = ({ data }) => {\n  return (\n    <Grid container mt={5} justify=\"center\">\n      <ResponsiveContainer width=\"100%\" height={500}>\n        <Chart data={data} layout=\"vertical\" style={{ fontSize: \"12px\" }}>\n          <XAxis type=\"number\" />\n          <YAxis dataKey=\"name\" reversed type=\"category\" />\n          <Bar dataKey=\"testTotal\" name=\"Test driver\" fill=\"#353535\" />\n          <Bar dataKey=\"selfTotal\" name=\"Autopositionnement\" fill=\"#b71b60\" />\n          <Bar\n            dataKey=\"othersTotal\"\n            name=\"Evaluation par les pairs\"\n            fill=\"#949b9f\"\n          />\n          <Legend />\n        </Chart>\n      </ResponsiveContainer>\n    </Grid>\n  );\n};\n\nexport default BarChart;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  BarChart as Chart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer\n} from \"recharts\";\n\nconst StackedBarChart = ({ data }) => {\n  return (\n    <Grid container mt={5} justify=\"center\">\n      <ResponsiveContainer width=\"100%\" height={200}>\n        <Chart data={data} layout=\"vertical\" style={{ fontSize: \"12px\" }}>\n          <XAxis type=\"number\" />\n          <YAxis dataKey=\"name\" reversed type=\"category\" />\n          <Bar dataKey=\"mark\" stackId=\"a\" name=\"Mon score\" fill=\"#b71b60\" />\n          <Bar\n            dataKey=\"rest\"\n            stackId=\"a\"\n            name=\"Autopositionnement\"\n            fill=\"#949b9f\"\n          />\n        </Chart>\n      </ResponsiveContainer>\n    </Grid>\n  );\n};\n\nexport default StackedBarChart;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { useSelector } from \"react-redux\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport SubmitButton from \"../submit-button/SubmitButton\";\nimport BarChart from \"../../results/bar-chart/BarChart\";\nimport StackedBarChart from \"../../results/stacked-bar-chart/StackedBarChart\";\n\nconst CustomRadio = withStyles({\n  root: {\n    color: \"#b71b53\",\n    \"&$checked\": {\n      color: \"#b71b53\"\n    },\n    margin: \"0 auto\"\n  },\n  checked: {}\n})(props => <Radio color=\"default\" {...props} />);\n\nconst useStyles = makeStyles(theme => ({\n  questionLine: {\n    borderBottom: \"1px solid rgba(75,75,75,0.2)\",\n    padding: \"20px 0\"\n  }\n}));\n\nlet requiredFields = [];\n\nconst validate = (values, props) => {\n  const errors = {};\n  props.test.questions.map(question => {\n    if (requiredFields.indexOf(question.id) === -1) {\n      requiredFields.push(question.id);\n    }\n    return requiredFields;\n  });\n\n  requiredFields.forEach(field => {\n    if (!values[field]) {\n      errors[field] = \"Required\";\n    }\n  });\n\n  return errors;\n};\n\n/* BUTTON LINE */\nconst radioButtons = ({ answers, salut, input, ...rest }) => (\n  <FormControl>\n    <RadioGroup {...input} {...rest} row>\n      {answers.map(answer => {\n        return (\n          <FormControlLabel\n            style={{\n              opacity: `${0.5 + answer.value / 15}`,\n              width: \"100px\",\n              display: \"flex\",\n              margin: \"0 auto\",\n              justifyContent: \"space-around\"\n            }}\n            key={answer.value}\n            value={answer.value.toString()}\n            control={<CustomRadio />}\n          />\n        );\n      })}\n    </RadioGroup>\n  </FormControl>\n);\n\n/* MAIN COMPONENT */\nconst LikertForm = ({ handleSubmit, pristine, submitting, test }) => {\n  const {\n    questions,\n    answers,\n    button,\n    wording,\n    topic,\n    type,\n    result,\n    name,\n    drivers\n  } = test;\n\n  const [isCompleted, setCompletion] = useState(false);\n  const [size, setSize] = useState({});\n  const [data, setData] = useState([]);\n\n  // REACT-REDUX WITH HOOKS, REPLACE MAPSTATETOPROPS\n  const { results } = useSelector(state => ({\n    results: state.form[name].values\n  }));\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    // ADAPT SIZE WHETHER IT'S A LIKERT SCALE OR A TRUE/FALSE\n    const resize = () => {\n      if (type === \"likert\") {\n        setSize({ questions: 5, blank: 1, answers: 6 });\n      } else if (type === \"true-or-false\") {\n        setSize({ questions: 7, blank: 1, answers: 4 });\n      }\n    };\n    resize();\n  }, [type]);\n\n  const renderWording = () => {\n    return (\n      <Fragment>\n        {topic ||\n          (wording && (\n            <Fragment>\n              {topic && <h3>{topic.toUpperCase()}</h3>}\n              <Grid\n                item\n                md={7}\n                sm={12}\n                style={{\n                  textAlign: \"justify\",\n                  marginBottom: \"30px\",\n                  fontStyle: \"italic\",\n                  fontSize: \"14px\"\n                }}\n              >\n                {wording}\n              </Grid>\n            </Fragment>\n          ))}\n      </Fragment>\n    );\n  };\n\n  const renderHeader = () => {\n    return (\n      <Grid container direction=\"row\" justify=\"flex-end\">\n        <Grid item md={size.questions} sm={false} />\n        <Grid item md={size.blank} sm={false} />\n        <Grid\n          item\n          md={size.answers}\n          sm={12}\n          style={{ display: \"flex\", justifyContent: \"flex-end\" }}\n        >\n          <Grid container direction=\"row\">\n            {answers &&\n              answers.map(answer => {\n                return (\n                  <div\n                    key={answer.value}\n                    style={{\n                      width: \"100px\",\n                      fontSize: \"14px\",\n                      textAlign: \"center\"\n                    }}\n                  >\n                    {answer.name}\n                  </div>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  const renderQuestions = () => {\n    return (\n      questions &&\n      questions.map((question, index) => (\n        <Grid\n          key={question.id}\n          container\n          direction=\"row\"\n          alignItems=\"center\"\n          justify=\"space-between\"\n          className={classes.questionLine}\n        >\n          <Grid item md={size.questions} sm={12} style={{ fontSize: \"14px\" }}>\n            {index + 1 + \". \" + question.text}\n          </Grid>\n          <Grid item md={size.blank} sm={false} />\n          <Grid item md={size.answers} sm={12}>\n            <Field\n              name={question.id}\n              answers={answers}\n              component={radioButtons}\n            />\n          </Grid>\n        </Grid>\n      ))\n    );\n  };\n\n  const renderSubmitButton = () => {\n    return (\n      <Fragment>\n        {result ? (\n          <SubmitButton disabled={pristine || submitting}>\n            <Fragment>{button}</Fragment>\n          </SubmitButton>\n        ) : (\n          <Grid\n            item\n            md={12}\n            style={{\n              height: \"10px\",\n              backgroundColor: \"#b71b53\",\n              borderRadius: \"5px\",\n              margin: \"50px 0\",\n              opacity: \"0.5\"\n            }}\n          />\n        )}\n      </Fragment>\n    );\n  };\n\n  const renderResult = () => {\n    if (result === \"histogram\") {\n      return (\n        <Fragment>\n          {isCompleted && result && <BarChart test={test} data={data} />}\n        </Fragment>\n      );\n    } else if (result === \"stackedBarChart\") {\n      return (\n        <Fragment>\n          {isCompleted && result && <StackedBarChart test={test} data={data} />}\n        </Fragment>\n      );\n    }\n  };\n\n  // FORMAT THE DATA SO IT MATCHES WITH BARCHART FORMAT\n  const formatResults = () => {\n    let rawData = {};\n    let formatedData = [];\n    if (type === \"true-or-false\") {\n      rawData = {\n        name: test.topic,\n        mark: 0,\n        rest: 100\n      };\n      results &&\n        questions.map(question => {\n          console.log(question[results[question.id]]);\n          rawData.mark += question[results[question.id]] * 10;\n          rawData.rest -= question[results[question.id]] * 10;\n          return rawData;\n        });\n      console.log(rawData);\n      formatedData.push(rawData);\n      setData(formatedData);\n    } else if (type === \"likert\") {\n      results &&\n        questions.map(question => {\n          if (!rawData[question.driver]) {\n            return (rawData[question.driver] = {\n              name: drivers[question.driver],\n              testTotal: Number(results[question.id]),\n              selfTotal: 15,\n              othersTotal: 18\n            });\n          } else {\n            return (rawData[question.driver].testTotal += Number(\n              results[question.id]\n            ));\n          }\n        });\n      formatedData = Object.values(rawData);\n      setData(formatedData);\n    }\n  };\n\n  const onSubmit = async formValues => {\n    // no need e.preventdefault as handleSubmit handles it\n    await formatResults();\n    setCompletion(true);\n    return formValues;\n  };\n\n  return (\n    <Fragment>\n      <Fragment>{renderWording()}</Fragment>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FormGroup>\n          <Fragment>{renderHeader()}</Fragment>\n          <Fragment>{renderQuestions()}</Fragment>\n          <Fragment>{renderSubmitButton()}</Fragment>\n        </FormGroup>\n      </form>\n      <Fragment>{renderResult()}</Fragment>\n    </Fragment>\n  );\n};\n\n// FORM NAME IS DEFINED IN FORMNAME PARENT ON EXERCISE PAGE\nexport default reduxForm({ form: \"\", enableReinitialize: true, validate })(\n  LikertForm\n);\n","import React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SubmitButton from \"../submit-button/SubmitButton\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\n\nconst CssTextField = withStyles({\n  root: {\n    marginBottom: \"10px\",\n    width: \"100%\",\n    \"& label.Mui-focused\": {\n      color: \"#b71b60\"\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"#b71b60\"\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"#b71b60\"\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"#353535\"\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"#b71b60\"\n      }\n    }\n  }\n})(TextField);\n\nconst validate = (formValues, props) => {\n  const errors = {};\n  // if (!formValues.title) {\n  //   errors.title = \"You must enter a title\";\n  // }\n  // if (!formValues.description) {\n  //   errors.description = \"You  enter a description\";\n  // }\n  return errors;\n};\n\nconst FreeField = ({ test, handleSubmit, pristine, submitting }) => {\n  const { questions, button, topic } = test;\n\n  const renderCustomInput = formProps => {\n    return (\n      <CssTextField\n        id=\"outlined-multiline-static\"\n        multiline\n        rows=\"6\"\n        variant=\"outlined\"\n        autoComplete=\"off\"\n        {...formProps.input}\n      />\n    );\n  };\n\n  const renderInputs = () => {\n    return questions.map((question, index) => {\n      return (\n        <Grid container key={question.id}>\n          <div style={{ marginBottom: \"10px\" }}>\n            {index + 1 + \". \" + question.text}\n          </div>\n          <Field name={question.id} component={renderCustomInput} />\n          <SubmitButton disabled={pristine || submitting}>\n            <Fragment>{button}</Fragment>\n          </SubmitButton>\n        </Grid>\n      );\n    });\n  };\n\n  const onSubmit = formValues => {\n    // SEND TO API\n    let values = { name: test.name, values: formValues };\n    console.log(values);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <FormGroup>\n        {topic && <h3>{topic.toUpperCase()}</h3>}\n        <Fragment>{renderInputs()}</Fragment>\n      </FormGroup>\n    </form>\n  );\n};\n\nexport default reduxForm({\n  form: \"\",\n  enableReinitialize: true,\n  validate\n})(FreeField);\n","import React, { Fragment } from \"react\";\nimport jsPDF from \"jspdf\";\nimport html2canvas from \"html2canvas\";\nimport LikertForm from \"../../components/forms/likert-form/LikertForm\";\nimport FreeField from \"../../components/forms/free-field/FreeField\";\nimport BarChart from \"../../components/results/bar-chart/BarChart\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { FormName } from \"redux-form\";\n\nconst ExercisePage = ({ skills, skill, parentIndex }) => {\n  const { topic, wording } = skills[parentIndex];\n\n  let initialValues = { question0: \"3\", question1: \"true\" };\n\n  const renderTestType = index =>\n    skill.tests.map((test, index) => {\n      if (test.type === \"likert\") {\n        return (\n          <FormName key={index}>\n            {() => (\n              <LikertForm\n                test={test}\n                form={test.name}\n                initialValues={initialValues}\n              />\n            )}\n          </FormName>\n        );\n      } else if (test.type === \"true-or-false\") {\n        return (\n          <FormName key={index}>\n            {() => (\n              <LikertForm\n                test={test}\n                form={test.name}\n                initialValues={initialValues}\n              />\n            )}\n          </FormName>\n        );\n      } else if (test.type === \"free-field\") {\n        return (\n          <FormName key={index}>\n            {() => (\n              <FreeField\n                test={test}\n                form={test.name}\n                initialValues={initialValues}\n              />\n            )}\n          </FormName>\n        );\n      } else if (test.type === \"multiple-source-result\") {\n        return <BarChart key={index} test={test} form={test.name} />;\n      }\n      return null;\n    });\n\n  // const printPdf = () => {\n  //   const input = document.getElementById(\"to-print\");\n\n  //   html2canvas(input).then(canvas => {\n  //     const imgData = canvas.toDataURL(\"image/png\");\n  //     const pdf = new jsPDF(\"p\", \"pt\", \"a4\", true);\n\n  //     pdf.addImage(imgData, \"PNG\", 0, 0, 270, 270);\n  //     pdf.save(`${skill.name}.pdf`);\n  //   });\n  // };\n\n  return (\n    <Fragment>\n      <div id=\"to-print\">\n        <h3>{topic}</h3>\n        <Grid\n          item\n          md={7}\n          sm={12}\n          style={{\n            textAlign: \"justify\",\n            marginBottom: \"30px\",\n            fontStyle: \"italic\",\n            fontSize: \"14px\"\n          }}\n        >\n          {wording}\n        </Grid>\n        <Fragment>{renderTestType()}</Fragment>\n      </div>\n      {/* <button onClick={() => printPdf()}>Print</button> */}\n    </Fragment>\n  );\n};\n\nexport default ExercisePage;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TabPanel from \"../../components/tab-panel/TabPanel\";\nimport Paper from \"@material-ui/core/Grid\";\nimport ExercisePage from \"../../components/exercise-page/ExercisePage\";\n\nconst a11yProps = index => {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    \"aria-controls\": `scrollable-auto-tabpanel-${index}`\n  };\n};\n\nconst language = \"fr\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    // flexGrow: 1,\n    width: \"100%\",\n    backgroundColor: \"white\"\n  },\n  tab: {\n    \"&:last-child\": {\n      color: \"#b71b53\"\n    }\n  },\n  paper: { margin: \"0\", width: \"100%\", overflowX: \"auto\", padding: \"20px 0\" }\n}));\n\n/* MAIN COMPONENT */\nconst ProfilerApp = () => {\n  const { skills } = window.props[language];\n  const classes = useStyles();\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const renderTabs = () => {\n    return (\n      <AppBar position=\"fixed\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n          TabIndicatorProps={{\n            style: {\n              backgroundColor: \"#b71b53\"\n            }\n          }}\n        >\n          {skills.map((skill, index) => {\n            return (\n              <Tab\n                key={index}\n                label={skill.name}\n                {...a11yProps(index)}\n                className={classes.tab}\n              />\n            );\n          })}\n        </Tabs>\n      </AppBar>\n    );\n  };\n\n  const renderPanel = () => {\n    return skills.map((skill, index) => {\n      return (\n        <TabPanel value={value} index={index} key={index}>\n          <Grid style={{ paddingTop: \"40px\" }}>\n            <Paper className={classes.paper}>\n              <ExercisePage skill={skill} skills={skills} parentIndex={index} />\n            </Paper>\n          </Grid>\n        </TabPanel>\n      );\n    });\n  };\n\n  return (\n    <Grid container className={classes.root} justify=\"center\">\n      <Grid item>{renderTabs()}</Grid>\n      <Grid item lg={8} md={12} sm={12} xs={12}>\n        {renderPanel()}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ProfilerApp;\n","import React from \"react\";\nimport ProfilerApp from \"./container/profiler-app/ProfilerApp\";\n\nconst App = () => {\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        width: \"100vw\"\n      }}\n    >\n      <ProfilerApp />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nexport default combineReducers({\n  form: formReducer\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport reducers from \"./reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}